{% comment %}
  Affirm Promo Component - Modern Implementation
  Uses Affirm's Promo JS API for faster loading
  Creates component while DOM loads, renders when ready
{% endcomment %}

{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign price = selected_variant.price -%}

<style>
  .affirm-promo-container {
    margin: 12px 0;
    font-size: 14px;
    line-height: 1.5;
    /* Reserve space to prevent layout shift - final size is 379x42 */
    min-height: 42px;
    max-width: 379px;
  }

  .affirm-promo-wrapper {
    cursor: pointer;
  }

  .affirm-promo-wrapper:hover {
    opacity: 0.8;
  }

  /* Loading skeleton */
  .affirm-promo-skeleton {
    display: inline-block;
    width: 250px;
    height: 1em;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    border-radius: 2px;
    vertical-align: middle;
  }

  .affirm-promo-skeleton.hidden {
    display: none;
  }

  @keyframes shimmer {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>

<div class="affirm-promo-container">
  <span class="affirm-promo-skeleton" id="affirm-promo-skeleton-{{ section.id }}"></span>
  <div class="affirm-promo-wrapper" id="affirm-promo-{{ section.id }}" data-amount="{{ price }}"></div>
</div>

<script>
(function() {
  'use strict';

  var SECTION_ID = '{{ section.id }}';
  var INITIAL_PRICE = {{ price }};
  var promoComponent = null;
  var isRendered = false;
  var container = null;
  var skeleton = null;

  // Create component with fast retry
  var createRetryCount = 0;
  var createMaxRetries = 30;

  function createPromoComponent(price) {
    if (!window.affirm || !window.affirm.ui || !window.affirm.ui.components) {
      if (createRetryCount >= createMaxRetries) {
        if (skeleton) skeleton.classList.add('hidden');
        return;
      }

      createRetryCount++;
      setTimeout(function() { createPromoComponent(price); }, 50); // Check every 50ms
      return;
    }

    try {
      promoComponent = window.affirm.ui.components.create('promo', {
        amount: price,
        pageType: 'product',
        affirmLogoColor: 'blue',
        learnMoreShow: true
      });

      createRetryCount = 0; // Reset counter

      // Try to render if DOM is already ready
      renderComponent();
    } catch (error) {
      if (skeleton) skeleton.classList.add('hidden');
    }
  }

  // Render component to DOM
  function renderComponent() {
    if (!promoComponent || isRendered) return;

    // Check if container exists before rendering
    var containerId = 'affirm-promo-' + SECTION_ID;
    var skeletonId = 'affirm-promo-skeleton-' + SECTION_ID;

    container = document.getElementById(containerId);
    skeleton = document.getElementById(skeletonId);

    if (!container) return;

    try {
      // Affirm's render() expects a CSS selector string, not a DOM element
      promoComponent.render('#' + containerId);
      isRendered = true;

      // Hide skeleton immediately
      if (skeleton) {
        skeleton.classList.add('hidden');
      }

      // Setup click handler for modal
      setupModalHandler();
    } catch (error) {
      // Hide skeleton on error too
      if (skeleton) {
        skeleton.classList.add('hidden');
      }
    }
  }

  // Update component with new price
  function updateComponent(newPrice) {
    if (!promoComponent) {
      createPromoComponent(newPrice);
      return;
    }

    try {
      // Show skeleton during update
      if (skeleton) {
        skeleton.classList.remove('hidden');
      }

      promoComponent.update({
        amount: newPrice,
        pageType: 'product',
        affirmLogoColor: 'blue',
        learnMoreShow: true
      });

      // Hide skeleton after update
      setTimeout(function() {
        if (skeleton) {
          skeleton.classList.add('hidden');
        }
      }, 500);

      // Update container data attribute
      if (container) {
        container.setAttribute('data-amount', newPrice);
      }
    } catch (error) {
      // Silent fail
    }
  }

  // Setup modal handler
  function setupModalHandler() {
    if (!container) return;

    container.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();

      var amount = parseInt(container.getAttribute('data-amount')) || INITIAL_PRICE;

      if (window.affirm && window.affirm.ui && window.affirm.ui.ready) {
        window.affirm.ui.ready(function() {
          if (window.affirm.ui.prequal && window.affirm.ui.prequal.show) {
            window.affirm.ui.prequal.show({ amount: amount });
          }
        });
      }
    });
  }

  // Listen for variant changes
  function handleVariantChange(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      updateComponent(e.detail.variant.price);
    }
  }

  // Re-initialize after DOM changes
  function handleRerender() {
    // Reset state
    isRendered = false;
    container = null;
    skeleton = null;

    // Try to render again
    renderComponent();
  }

  // Initialize
  function init() {
    // Create component immediately
    createPromoComponent(INITIAL_PRICE);

    // Setup event listeners
    document.addEventListener('variant:changed', handleVariantChange);
    document.addEventListener('product:variant:change', handleVariantChange);
    document.addEventListener('product:rerendered', handleRerender);

    // Try to render when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', renderComponent);
    } else {
      renderComponent();
    }
  }

  // Start initialization
  init();
})();
</script>
