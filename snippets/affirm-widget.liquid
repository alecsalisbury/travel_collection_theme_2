{% comment %}
  Affirm Widget with Preloaded Layout
  Displays static text immediately to prevent layout shift
  Updates with actual Affirm pricing when available
{% endcomment %}

{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign price = selected_variant.price -%}

<style>
  .affirm-custom-widget {
    margin: 12px 0;
    font-size: 14px;
    line-height: 1.5;
    color: #333;
    cursor: pointer;
  }

  .affirm-custom-widget__content {
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .affirm-custom-widget__content.loaded {
    opacity: 1;
  }

  .affirm-custom-widget__skeleton {
    display: inline-block;
    width: 200px;
    height: 1em;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    border-radius: 2px;
    vertical-align: middle;
  }

  .affirm-custom-widget__skeleton.hidden {
    display: none;
  }

  @keyframes shimmer {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Hide the default Affirm widget */
  .affirm-as-low-as {
    display: none !important;
  }
</style>

<div class="affirm-widget-container">
  <div class="affirm-custom-widget affirm-modal-trigger" data-amount="{{ price }}">
    <span class="affirm-custom-widget__skeleton" id="affirm-skeleton"></span>
    <span class="affirm-custom-widget__content" id="affirm-content"></span>
  </div>

  {%- comment -%}
    Hidden Affirm widget for fetching actual pricing
  {%- endcomment -%}
  <p class="affirm-as-low-as"
     data-page-type="product"
     data-amount="{{ price }}"
     data-affirm-color="blue"
     data-learnmore-show="false">
  </p>

  {%- comment -%}
    "Check your purchasing power" link (hidden)
    To show: change display: none to display: inline-block
  {%- endcomment -%}
  <a class="affirm-check-power-link"
     href="#"
     onclick="affirm.ui.ready(function() { affirm.ui.prequal.show({ amount: {{ price }} }); }); return false;"
     style="display: none; margin-top: 4px; color: #08c; font-size: inherit; text-decoration: none; cursor: pointer;"
     onmouseover="this.style.textDecoration='underline'"
     onmouseout="this.style.textDecoration='none'"
     aria-label="Check your purchasing power - Learn more about Affirm Financing (opens in modal)">
    Check your purchasing power
  </a>
</div>

<script>
(function() {
  console.log('[AFFIRM WIDGET] Initialized with price:', {{ price }});

  var refreshTimer = null;
  var lastPrice = {{ price }};
  var isRefreshing = false;
  var hasListeners = false;

  // Copy Affirm's entire text and display it
  function updateAffirmContent() {
    var widget = document.querySelector('.affirm-as-low-as');
    var content = document.getElementById('affirm-content');
    var skeleton = document.getElementById('affirm-skeleton');

    if (!widget || !content) return false;

    // Get the full text from Affirm's widget
    var affirmText = widget.textContent || '';

    // Only update if there's actual content
    if (affirmText.trim()) {
      console.log('[AFFIRM WIDGET] Affirm text:', affirmText);

      content.textContent = affirmText;
      content.classList.add('loaded');

      // Hide skeleton when content is loaded
      if (skeleton) {
        skeleton.classList.add('hidden');
      }

      return true;
    }

    return false;
  }

  // Poll for Affirm to finish loading and extract content
  var loadCheckAttempts = 0;
  var loadCheckInterval = setInterval(function() {
    loadCheckAttempts++;

    if (updateAffirmContent()) {
      clearInterval(loadCheckInterval);
      console.log('[AFFIRM WIDGET] Successfully loaded Affirm content');
    } else if (loadCheckAttempts >= 50) {
      // Timeout after 5 seconds (50 * 100ms)
      clearInterval(loadCheckInterval);
      console.log('[AFFIRM WIDGET] Affirm content timeout');
    }
  }, 100);

  // Debounced refresh to prevent multiple rapid calls
  function debounceRefresh(newPrice) {
    // Skip if already refreshing
    if (isRefreshing) {
      return;
    }

    // Skip if price hasn't changed
    if (newPrice === lastPrice) {
      return;
    }

    // Clear any pending refresh
    if (refreshTimer) {
      clearTimeout(refreshTimer);
    }

    // Schedule refresh
    refreshTimer = setTimeout(function() {
      isRefreshing = true;
      lastPrice = newPrice;

      if (window.affirm && window.affirm.ui && window.affirm.ui.refresh) {
        affirm.ui.ready(function() {
          affirm.ui.refresh();
          console.log('[AFFIRM WIDGET] Refreshed for price:', newPrice);

          // Reset flag after a delay
          setTimeout(function() {
            isRefreshing = false;
          }, 500);
        });
      } else {
        isRefreshing = false;
      }

      refreshTimer = null;
    }, 200); // Wait 200ms before refreshing
  }

  // Update Affirm widget when variant changes
  function updateAffirmWidget(newPrice) {
    // Update the affirm-as-low-as element
    var affirmWidget = document.querySelector('.affirm-as-low-as');
    if (affirmWidget) {
      affirmWidget.setAttribute('data-amount', newPrice);
    }

    // Show skeleton and hide the content until Affirm updates it
    var content = document.getElementById('affirm-content');
    var skeleton = document.getElementById('affirm-skeleton');

    if (content) {
      content.classList.remove('loaded');
    }

    if (skeleton) {
      skeleton.classList.remove('hidden');
    }

    // Update the prequal link
    var prqualLink = document.querySelector('.affirm-check-power-link');
    if (prqualLink) {
      prqualLink.onclick = function() {
        affirm.ui.ready(function() {
          affirm.ui.prequal.show({ amount: newPrice });
        });
        return false;
      };
    }

    // Debounced refresh, then extract actual content
    debounceRefresh(newPrice);

    // Poll for updated Affirm content after refresh
    setTimeout(function() {
      var attempts = 0;
      var contentCheckInterval = setInterval(function() {
        attempts++;
        if (updateAffirmContent() || attempts >= 20) {
          clearInterval(contentCheckInterval);
        }
      }, 100);
    }, 300);
  }

  // Handle modal trigger clicks using event delegation
  function handleModalClick(e) {
    var target = e.target;

    // Find the closest affirm-modal-trigger element
    while (target && !target.classList.contains('affirm-modal-trigger')) {
      target = target.parentElement;
      if (!target || target === document.body) return;
    }

    e.preventDefault();
    e.stopPropagation();

    var amount = parseInt(target.getAttribute('data-amount')) || 0;
    console.log('[AFFIRM WIDGET] Modal trigger clicked, amount:', amount);

    if (window.affirm && window.affirm.ui && window.affirm.ui.ready) {
      window.affirm.ui.ready(function() {
        console.log('[AFFIRM WIDGET] Affirm.js ready, opening modal');
        // Try different modal methods based on what's available
        if (window.affirm.ui.prequal && typeof window.affirm.ui.prequal.show === 'function') {
          console.log('[AFFIRM WIDGET] Using prequal.show');
          window.affirm.ui.prequal.show({ amount: amount });
        } else if (typeof window.affirm.ui.openModal === 'function') {
          console.log('[AFFIRM WIDGET] Using openModal');
          window.affirm.ui.openModal({ amount: amount });
        } else if (typeof window.affirm.ui.modal === 'function') {
          console.log('[AFFIRM WIDGET] Using modal');
          window.affirm.ui.modal({ amount: amount });
        } else {
          console.log('[AFFIRM WIDGET] No suitable modal method found');
          console.log('[AFFIRM WIDGET] Available methods:', Object.keys(window.affirm.ui));
        }
      });
    } else {
      console.log('[AFFIRM WIDGET] Affirm.js not loaded or not ready');
    }
  }

  // Update modal trigger amounts when variant changes
  function updateModalTriggers(newPrice) {
    var triggers = document.querySelectorAll('.affirm-modal-trigger');
    triggers.forEach(function(trigger) {
      trigger.setAttribute('data-amount', newPrice);
    });
  }

  // Set up listeners only once
  if (!hasListeners) {
    hasListeners = true;

    // Set up modal trigger using event delegation (works even after DOM changes)
    document.body.addEventListener('click', handleModalClick);

    // Variant change handler
    var variantHandler = function(e) {
      if (e.detail && e.detail.variant && e.detail.variant.price) {
        updateAffirmWidget(e.detail.variant.price);
        updateModalTriggers(e.detail.variant.price);
      }
    };

    document.addEventListener('variant:changed', variantHandler, { once: false });
    document.addEventListener('product:variant:change', variantHandler, { once: false });

    // Re-initialize after DOM changes (heavily debounced)
    var rerenderCount = 0;
    document.addEventListener('product:rerendered', function() {
      rerenderCount++;
      if (rerenderCount > 1) {
        // Skip if this is a duplicate event
        return;
      }

      setTimeout(function() {
        rerenderCount = 0;
      }, 1000);

      debounceRefresh(lastPrice);
    });
  }
})();
</script>