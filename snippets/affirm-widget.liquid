{% comment %}
  Affirm Widget with Preloaded Layout
  Displays static text immediately to prevent layout shift
  Updates with actual Affirm pricing when available
{% endcomment %}

{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign price = selected_variant.price -%}

<style>
  .affirm-custom-widget {
    margin: 12px 0;
    font-size: 14px;
    line-height: 1.5;
    color: #333;
  }

  .affirm-custom-widget__price {
    font-weight: 500;
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .affirm-custom-widget__price.loaded {
    opacity: 1;
  }

  .affirm-custom-widget__logo {
    display: inline;
    vertical-align: middle;
    margin-left: 4px;
  }

  .affirm-custom-widget__logo svg {
    height: 1em;
    width: auto;
    display: inline;
    vertical-align: middle;
    position: relative;
    top: -0.05em;
  }

  /* Hide the default Affirm widget */
  .affirm-as-low-as {
    display: none !important;
  }
</style>

<div class="affirm-widget-container">
  <div class="affirm-custom-widget affirm-modal-trigger" data-amount="{{ price }}" style="cursor: pointer;">
    Starting at <span class="affirm-custom-widget__price" id="affirm-custom-price"></span>/mo with <span class="affirm-custom-widget__logo" id="affirm-custom-logo">
      <svg width="429" height="171" viewBox="0 0 429 171" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_affirm)">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M28.1 156.27C22.8 156.27 20.1 153.66 20.1 149.37C20.1 141.37 29.02 138.68 45.29 136.95C45.29 147.61 38.08 156.27 28.05 156.27H28.1ZM35.1 96.3198C23.47 96.3198 10.1 101.79 2.83998 107.58L9.46998 121.58C15.29 116.25 24.7 111.69 33.19 111.69C41.26 111.69 45.72 114.39 45.72 119.83C45.72 123.48 42.77 125.33 37.19 126.06C16.33 128.76 -0.0200195 134.52 -0.0200195 150.59C-0.0200195 163.33 9.04998 171.04 23.22 171.04C33.34 171.04 42.34 165.42 46.62 158.04V169.04H65.48V122.95C65.48 103.95 52.29 96.2798 35.11 96.2798L35.1 96.3198Z" fill="black"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M224.39 98.3902V168.95H244.57V134.95C244.57 118.8 254.35 114.05 261.16 114.05C264.226 114.026 267.229 114.914 269.79 116.6L273.48 97.9502C270.62 96.8056 267.559 96.2511 264.48 96.3202C254.11 96.3202 247.59 100.91 243.29 110.25V98.3902H224.39Z" fill="black"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M367 96.3198C356.33 96.3198 348.35 102.62 344.2 108.7C340.35 100.85 332.2 96.3198 322.4 96.3198C311.74 96.3198 304.35 102.24 300.94 109.06V98.3898H281.48V168.95H301.68V132.62C301.68 119.62 308.51 113.33 314.88 113.33C320.65 113.33 325.95 117.06 325.95 126.69V168.95H346.11V132.62C346.11 119.43 352.77 113.33 359.44 113.33C364.78 113.33 370.44 117.21 370.44 126.55V168.95H390.6V120.17C390.6 104.32 379.93 96.3198 367.04 96.3198" fill="black"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M175.28 98.3901H157V91.2201C157 81.8801 162.33 79.2201 166.92 79.2201C170.054 79.261 173.135 80.0313 175.92 81.4701L182.14 67.2401C182.14 67.2401 175.83 63.1201 164.36 63.1201C151.47 63.1201 136.8 70.3901 136.8 93.2001V98.3901H106.25V91.2201C106.25 81.8801 111.57 79.2201 116.17 79.2201C119.309 79.2199 122.4 79.9926 125.17 81.4701L131.39 67.2401C127.68 65.0701 121.71 63.1201 113.62 63.1201C100.73 63.1201 86.0599 70.3901 86.0599 93.2001V98.3901H74.3799V113.95H86.0899V168.95H106.25V113.95H136.84V168.95H157V113.95H175.28V98.3901Z" fill="black"/>
          <path d="M207.46 98.3901H187.32V168.92H207.46V98.3901Z" fill="black"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M188.06 86.4H207.79C219.3 50.21 258.35 18.4 304.79 18.4C361.27 18.4 410.08 61.4 410.08 128.34C410.252 142.08 408.364 155.769 404.48 168.95H423.63L423.82 168.29C427.047 155.241 428.639 141.842 428.56 128.4C428.56 53.75 374.16 0.0200195 304.83 0.0200195C250.37 0.0200195 201.83 37.82 188.07 86.42L188.06 86.4Z" fill="#4A4AF4"/>
        </g>
        <defs>
          <clipPath id="clip0_affirm">
            <rect width="428.55" height="171" fill="white"/>
          </clipPath>
        </defs>
      </svg>
    </span>
  </div>

  {%- comment -%}
    Hidden Affirm widget for fetching actual pricing
  {%- endcomment -%}
  <p class="affirm-as-low-as"
     data-page-type="product"
     data-amount="{{ price }}"
     data-affirm-color="blue"
     data-learnmore-show="false">
  </p>

  {%- comment -%}
    "Check your purchasing power" link (hidden)
    To show: change display: none to display: inline-block
  {%- endcomment -%}
  <a class="affirm-check-power-link"
     href="#"
     onclick="affirm.ui.ready(function() { affirm.ui.prequal.show({ amount: {{ price }} }); }); return false;"
     style="display: none; margin-top: 4px; color: #08c; font-size: inherit; text-decoration: none; cursor: pointer;"
     onmouseover="this.style.textDecoration='underline'"
     onmouseout="this.style.textDecoration='none'"
     aria-label="Check your purchasing power - Learn more about Affirm Financing (opens in modal)">
    Check your purchasing power
  </a>
</div>

<script>
(function() {
  console.log('[AFFIRM WIDGET] Initialized with price:', {{ price }});

  var refreshTimer = null;
  var lastPrice = {{ price }};
  var isRefreshing = false;
  var hasListeners = false;

  // Extract price from Affirm's widget and update custom display
  function updateCustomPrice() {
    var widget = document.querySelector('.affirm-as-low-as');
    var customPrice = document.getElementById('affirm-custom-price');

    if (!widget || !customPrice) return false;

    // Look for the price in Affirm's rendered content
    var affirmText = widget.textContent || '';
    // Match patterns like "$49/mo" or "as low as $49"
    var priceMatch = affirmText.match(/\$(\d+)/);

    if (priceMatch && priceMatch[1]) {
      var price = priceMatch[1];
      customPrice.textContent = '$' + price;
      customPrice.classList.add('loaded');
      console.log('[AFFIRM WIDGET] Updated custom price to:', '$' + price);
      return true;
    }

    return false;
  }

  // Poll for Affirm to finish loading and extract price
  var loadCheckAttempts = 0;
  var loadCheckInterval = setInterval(function() {
    loadCheckAttempts++;

    if (updateCustomPrice()) {
      clearInterval(loadCheckInterval);
      console.log('[AFFIRM WIDGET] Successfully extracted Affirm price');
    } else if (loadCheckAttempts >= 50) {
      // Timeout after 5 seconds (50 * 100ms)
      clearInterval(loadCheckInterval);
      console.log('[AFFIRM WIDGET] Using estimated price (Affirm API timeout)');
    }
  }, 100);

  // Debounced refresh to prevent multiple rapid calls
  function debounceRefresh(newPrice) {
    // Skip if already refreshing
    if (isRefreshing) {
      return;
    }

    // Skip if price hasn't changed
    if (newPrice === lastPrice) {
      return;
    }

    // Clear any pending refresh
    if (refreshTimer) {
      clearTimeout(refreshTimer);
    }

    // Schedule refresh
    refreshTimer = setTimeout(function() {
      isRefreshing = true;
      lastPrice = newPrice;

      if (window.affirm && window.affirm.ui && window.affirm.ui.refresh) {
        affirm.ui.ready(function() {
          affirm.ui.refresh();
          console.log('[AFFIRM WIDGET] Refreshed for price:', newPrice);

          // Reset flag after a delay
          setTimeout(function() {
            isRefreshing = false;
          }, 500);
        });
      } else {
        isRefreshing = false;
      }

      refreshTimer = null;
    }, 200); // Wait 200ms before refreshing
  }

  // Update Affirm widget when variant changes
  function updateAffirmWidget(newPrice) {
    // Update the affirm-as-low-as element
    var affirmWidget = document.querySelector('.affirm-as-low-as');
    if (affirmWidget) {
      affirmWidget.setAttribute('data-amount', newPrice);
    }

    // Hide the price until Affirm API updates it
    var customPrice = document.getElementById('affirm-custom-price');
    if (customPrice) {
      customPrice.classList.remove('loaded');
    }

    // Update the prequal link
    var prqualLink = document.querySelector('.affirm-check-power-link');
    if (prqualLink) {
      prqualLink.onclick = function() {
        affirm.ui.ready(function() {
          affirm.ui.prequal.show({ amount: newPrice });
        });
        return false;
      };
    }

    // Debounced refresh, then extract actual price
    debounceRefresh(newPrice);

    // Poll for updated Affirm price after refresh
    setTimeout(function() {
      var attempts = 0;
      var priceCheckInterval = setInterval(function() {
        attempts++;
        if (updateCustomPrice() || attempts >= 20) {
          clearInterval(priceCheckInterval);
        }
      }, 100);
    }, 300);
  }

  // Handle modal trigger clicks using event delegation
  function handleModalClick(e) {
    var target = e.target;

    // Find the closest affirm-modal-trigger element
    while (target && !target.classList.contains('affirm-modal-trigger')) {
      target = target.parentElement;
      if (!target || target === document.body) return;
    }

    e.preventDefault();
    e.stopPropagation();

    var amount = parseInt(target.getAttribute('data-amount')) || 0;
    console.log('[AFFIRM WIDGET] Modal trigger clicked, amount:', amount);

    if (window.affirm && window.affirm.ui && window.affirm.ui.ready) {
      window.affirm.ui.ready(function() {
        console.log('[AFFIRM WIDGET] Affirm.js ready, opening modal');
        // Try different modal methods based on what's available
        if (window.affirm.ui.prequal && typeof window.affirm.ui.prequal.show === 'function') {
          console.log('[AFFIRM WIDGET] Using prequal.show');
          window.affirm.ui.prequal.show({ amount: amount });
        } else if (typeof window.affirm.ui.openModal === 'function') {
          console.log('[AFFIRM WIDGET] Using openModal');
          window.affirm.ui.openModal({ amount: amount });
        } else if (typeof window.affirm.ui.modal === 'function') {
          console.log('[AFFIRM WIDGET] Using modal');
          window.affirm.ui.modal({ amount: amount });
        } else {
          console.log('[AFFIRM WIDGET] No suitable modal method found');
          console.log('[AFFIRM WIDGET] Available methods:', Object.keys(window.affirm.ui));
        }
      });
    } else {
      console.log('[AFFIRM WIDGET] Affirm.js not loaded or not ready');
    }
  }

  // Update modal trigger amounts when variant changes
  function updateModalTriggers(newPrice) {
    var triggers = document.querySelectorAll('.affirm-modal-trigger');
    triggers.forEach(function(trigger) {
      trigger.setAttribute('data-amount', newPrice);
    });
  }

  // Set up listeners only once
  if (!hasListeners) {
    hasListeners = true;

    // Set up modal trigger using event delegation (works even after DOM changes)
    document.body.addEventListener('click', handleModalClick);

    // Variant change handler
    var variantHandler = function(e) {
      if (e.detail && e.detail.variant && e.detail.variant.price) {
        updateAffirmWidget(e.detail.variant.price);
        updateModalTriggers(e.detail.variant.price);
      }
    };

    document.addEventListener('variant:changed', variantHandler, { once: false });
    document.addEventListener('product:variant:change', variantHandler, { once: false });

    // Re-initialize after DOM changes (heavily debounced)
    var rerenderCount = 0;
    document.addEventListener('product:rerendered', function() {
      rerenderCount++;
      if (rerenderCount > 1) {
        // Skip if this is a duplicate event
        return;
      }

      setTimeout(function() {
        rerenderCount = 0;
      }, 1000);

      debounceRefresh(lastPrice);
    });
  }
})();
</script>