{% comment %}
  Custom Star Rating Display - DEBUG MODE
  Testing different metafield paths to find Yotpo data
{% endcomment %}

<!-- METAFIELD DEBUG -->
<div style="padding: 15px; background: #f0f0f0; border: 2px solid #333; margin: 10px 0; font-family: monospace; font-size: 12px;">
  <strong>YOTPO METAFIELD DEBUG:</strong><br><br>

  <strong>Testing yotpo namespace:</strong><br>
  - yotpo.reviews_count: {{ product.metafields.yotpo.reviews_count }}<br>
  - yotpo.reviews_average: {{ product.metafields.yotpo.reviews_average }}<br>
  - yotpo.bottomline: {{ product.metafields.yotpo.bottomline }}<br>
  - yotpo.reviews: {{ product.metafields.yotpo.reviews }}<br><br>

  <strong>Testing yotpo_v3 namespace:</strong><br>
  - yotpo_v3.reviews_count: {{ product.metafields.yotpo_v3.reviews_count }}<br>
  - yotpo_v3.reviews_average: {{ product.metafields.yotpo_v3.reviews_average }}<br><br>

  <strong>Testing reviews namespace (Shopify native):</strong><br>
  - reviews.rating.value: {{ product.metafields.reviews.rating.value }}<br>
  - reviews.rating_count: {{ product.metafields.reviews.rating_count }}<br><br>

  <strong>All available metafield namespaces:</strong><br>
  {% for metafield_namespace in product.metafields %}
    - {{ metafield_namespace[0] }}:
    {% for key in metafield_namespace[1] %}
      {{ key[0] }}{% unless forloop.last %}, {% endunless %}
    {% endfor %}<br>
  {% endfor %}

  <br><strong>Product ID:</strong> {{ product.id }}
</div>
<style>
  .custom-star-rating {
    display: none; /* Hidden until populated by JS */
    align-items: center;
    gap: 8px;
    cursor: pointer;
    margin: 8px 0;
  }

  .custom-star-rating.loaded {
    display: flex;
  }

  .custom-star-rating:hover .custom-star-rating__text {
    text-decoration: underline;
  }

  .custom-star-rating__stars {
    display: flex;
    gap: 2px;
  }

  .custom-star-rating__star {
    width: 16px;
    height: 16px;
    fill: #e0e0e0;
  }

  .custom-star-rating__star.filled {
    fill: #ffa500;
  }

  .custom-star-rating__star.half {
    fill: url(#half-star-gradient);
  }

  .custom-star-rating__text {
    font-size: 14px;
    color: #666;
  }
</style>

<svg style="display: none;">
  <defs>
    <linearGradient id="half-star-gradient">
      <stop offset="50%" stop-color="#ffa500"/>
      <stop offset="50%" stop-color="#e0e0e0"/>
    </linearGradient>
  </defs>
</svg>

<div class="custom-star-rating" onclick="document.querySelector('.yotpo-main-widget, .yotpo-reviews-carousel, [id*=yotpo]')?.scrollIntoView({ behavior: 'smooth', block: 'start' })">
  <div class="custom-star-rating__stars"></div>
  <span class="custom-star-rating__text"></span>
</div>

<script>
(function() {
  function extractYotpoData() {
    // Look for Yotpo bottom line text (e.g., "Based on 8 reviews")
    const yotpoText = document.querySelector('.yotpo-bottomline .text-m, .yotpo-bottom-line-basic-text, .yotpo-bottomline-box-1 .text-m');

    if (!yotpoText) return null;

    const text = yotpoText.textContent || yotpoText.innerText;
    const countMatch = text.match(/(\d+)\s+review/i);

    if (!countMatch) return null;

    const reviewCount = parseInt(countMatch[1], 10);

    // Extract rating from aria-label or data attributes
    let rating = 0;
    const ratingElement = document.querySelector('.yotpo-bottomline [aria-label*="stars"], .yotpo-bottomline .sr-only, .yotpo-icon-star[class*="yotpo-icon-"]');

    if (ratingElement) {
      const ariaLabel = ratingElement.getAttribute('aria-label') || '';
      const ratingMatch = ariaLabel.match(/([\d.]+)\s+star/i);
      if (ratingMatch) {
        rating = parseFloat(ratingMatch[1]);
      }
    }

    // Fallback: count filled stars
    if (!rating) {
      const filledStars = document.querySelectorAll('.yotpo-bottomline .yotpo-icon-star.rating-star:not(.yotpo-icon-empty-star)');
      const halfStars = document.querySelectorAll('.yotpo-bottomline .yotpo-icon-half-star');
      rating = filledStars.length + (halfStars.length * 0.5);
    }

    return { rating, reviewCount };
  }

  function renderStars(rating) {
    const starsHtml = [];
    for (let i = 1; i <= 5; i++) {
      const starClass = rating >= i ? 'filled' : (rating >= i - 0.5 ? 'half' : '');
      starsHtml.push(`
        <svg class="custom-star-rating__star ${starClass}" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      `);
    }
    return starsHtml.join('');
  }

  function updateCustomRating() {
    const data = extractYotpoData();

    if (!data || data.reviewCount === 0) return;

    const customRating = document.querySelector('.custom-star-rating');
    if (!customRating) return;

    const starsContainer = customRating.querySelector('.custom-star-rating__stars');
    const textContainer = customRating.querySelector('.custom-star-rating__text');

    if (starsContainer && textContainer) {
      starsContainer.innerHTML = renderStars(data.rating);
      textContainer.textContent = `${data.rating.toFixed(1)} (${data.reviewCount} ${data.reviewCount === 1 ? 'review' : 'reviews'})`;
      customRating.classList.add('loaded');
    }
  }

  // Try immediately
  updateCustomRating();

  // Try after DOM loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateCustomRating);
  }

  // Try after a delay for Yotpo to load
  setTimeout(updateCustomRating, 500);
  setTimeout(updateCustomRating, 1000);
  setTimeout(updateCustomRating, 2000);

  // Listen for Yotpo events
  document.addEventListener('yotpo.bottomline.loaded', updateCustomRating);
  window.addEventListener('yotpo.initialized', updateCustomRating);
})();
</script>
