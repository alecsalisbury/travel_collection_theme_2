{% comment %}
  Custom Star Rating Display
  Extracts review data from Yotpo widget on page load
  Displays stars and count when reviews are available
  Click to scroll to full reviews section
{% endcomment %}
<style>
  .custom-star-rating {
    display: none; /* Hidden until populated by JS */
    align-items: center;
    gap: 8px;
    cursor: pointer;
    margin: 8px 0;
  }

  .custom-star-rating.loaded {
    display: flex;
  }

  .custom-star-rating:hover .custom-star-rating__text {
    text-decoration: underline;
  }

  .custom-star-rating__stars {
    display: flex;
    gap: 2px;
  }

  .custom-star-rating__star {
    width: 16px;
    height: 16px;
    fill: #e0e0e0;
  }

  .custom-star-rating__star.filled {
    fill: #ffa500;
  }

  .custom-star-rating__star.half {
    fill: url(#half-star-gradient);
  }

  .custom-star-rating__text {
    font-size: 14px;
    color: #666;
  }
</style>

<svg style="display: none;">
  <defs>
    <linearGradient id="half-star-gradient">
      <stop offset="50%" stop-color="#ffa500"/>
      <stop offset="50%" stop-color="#e0e0e0"/>
    </linearGradient>
  </defs>
</svg>

<div class="custom-star-rating" onclick="document.querySelector('.yotpo-main-widget, .yotpo-reviews-carousel, [id*=yotpo]')?.scrollIntoView({ behavior: 'smooth', block: 'start' })">
  <div class="custom-star-rating__stars"></div>
  <span class="custom-star-rating__text"></span>
</div>

<script>
(function() {
  function extractYotpoData() {
    console.log('[Custom Stars] Attempting to extract Yotpo data...');

    // Look for Yotpo bottom line text (e.g., "Based on 8 reviews")
    const yotpoText = document.querySelector('.yotpo-bottomline .text-m, .yotpo-bottom-line-basic-text, .yotpo-bottomline-box-1 .text-m');
    console.log('[Custom Stars] Yotpo text element found:', !!yotpoText);

    if (!yotpoText) return null;

    const text = yotpoText.textContent || yotpoText.innerText;
    console.log('[Custom Stars] Yotpo text content:', text);

    const countMatch = text.match(/(\d+)\s+review/i);

    if (!countMatch) {
      console.log('[Custom Stars] No review count match found');
      return null;
    }

    const reviewCount = parseInt(countMatch[1], 10);
    console.log('[Custom Stars] Review count extracted:', reviewCount);

    // Extract rating from aria-label or data attributes
    let rating = 0;
    const ratingElement = document.querySelector('.yotpo-bottomline [aria-label*="stars"], .yotpo-bottomline .sr-only, .yotpo-icon-star[class*="yotpo-icon-"]');

    if (ratingElement) {
      const ariaLabel = ratingElement.getAttribute('aria-label') || '';
      const ratingMatch = ariaLabel.match(/([\d.]+)\s+star/i);
      if (ratingMatch) {
        rating = parseFloat(ratingMatch[1]);
        console.log('[Custom Stars] Rating from aria-label:', rating);
      }
    }

    // Fallback: count filled stars
    if (!rating) {
      const filledStars = document.querySelectorAll('.yotpo-bottomline .yotpo-icon-star.rating-star:not(.yotpo-icon-empty-star)');
      const halfStars = document.querySelectorAll('.yotpo-bottomline .yotpo-icon-half-star');
      rating = filledStars.length + (halfStars.length * 0.5);
      console.log('[Custom Stars] Rating from counting stars:', rating, '(filled:', filledStars.length, 'half:', halfStars.length + ')');
    }

    console.log('[Custom Stars] Final extracted data:', { rating, reviewCount });
    return { rating, reviewCount };
  }

  function renderStars(rating) {
    const starsHtml = [];
    for (let i = 1; i <= 5; i++) {
      const starClass = rating >= i ? 'filled' : (rating >= i - 0.5 ? 'half' : '');
      starsHtml.push(`
        <svg class="custom-star-rating__star ${starClass}" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      `);
    }
    return starsHtml.join('');
  }

  let hasLoaded = false;

  function updateCustomRating() {
    console.log('[Custom Stars] updateCustomRating called, hasLoaded:', hasLoaded);

    if (hasLoaded) return; // Only run once

    const data = extractYotpoData();

    if (!data || data.reviewCount === 0) {
      console.log('[Custom Stars] No data or reviewCount is 0, exiting');
      return;
    }

    const customRating = document.querySelector('.custom-star-rating');
    console.log('[Custom Stars] Custom rating container found:', !!customRating);
    if (!customRating) return;

    const starsContainer = customRating.querySelector('.custom-star-rating__stars');
    const textContainer = customRating.querySelector('.custom-star-rating__text');

    if (starsContainer && textContainer) {
      starsContainer.innerHTML = renderStars(data.rating);
      textContainer.textContent = `${data.rating.toFixed(1)} (${data.reviewCount} ${data.reviewCount === 1 ? 'review' : 'reviews'})`;
      customRating.classList.add('loaded');
      hasLoaded = true;
      console.log('[Custom Stars] âœ… Successfully loaded custom stars!');
    }
  }

  // Try immediately
  updateCustomRating();

  // Try after DOM loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateCustomRating);
  }

  // Watch for Yotpo widget to appear in DOM
  const observer = new MutationObserver(function(mutations) {
    if (hasLoaded) {
      observer.disconnect();
      return;
    }

    for (let mutation of mutations) {
      if (mutation.addedNodes.length > 0) {
        // Check if Yotpo bottomline was added
        const yotpoAdded = Array.from(mutation.addedNodes).some(node =>
          node.nodeType === 1 && (
            node.classList?.contains('yotpo-bottomline') ||
            node.querySelector?.('.yotpo-bottomline')
          )
        );

        if (yotpoAdded) {
          setTimeout(updateCustomRating, 100); // Small delay for Yotpo to fully render
          break;
        }
      }
    }
  });

  // Start observing
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });

  // Fallback timeouts in case MutationObserver misses it
  setTimeout(updateCustomRating, 500);
  setTimeout(updateCustomRating, 1500);

  // Listen for Yotpo events
  document.addEventListener('yotpo.bottomline.loaded', updateCustomRating);
  window.addEventListener('yotpo.initialized', updateCustomRating);

  // Cleanup observer after 5 seconds
  setTimeout(() => observer.disconnect(), 5000);
})();
</script>
