{% comment %}
  Custom Star Rating Display
  Extracts review data from Yotpo widget on page load
  Displays stars and count when reviews are available
  Click to scroll to full reviews section
{% endcomment %}

<!-- DEBUG PANEL (remove after testing) -->
<div id="custom-stars-debug" style="padding: 15px; background: #fff3cd; border: 2px solid #ffc107; margin: 10px 0; font-family: monospace; font-size: 12px;">
  <strong>üîç Custom Stars Debug Panel</strong><br>
  <div id="debug-log"></div>
</div>
<style>
  .custom-star-rating {
    display: none; /* Hidden until populated by JS */
    align-items: center;
    gap: 8px;
    cursor: pointer;
    margin: 8px 0;
  }

  .custom-star-rating.loaded {
    display: flex;
  }

  .custom-star-rating:hover .custom-star-rating__text {
    text-decoration: underline;
  }

  .custom-star-rating__stars {
    display: flex;
    gap: 2px;
  }

  .custom-star-rating__star {
    width: 16px;
    height: 16px;
    fill: #e0e0e0;
  }

  .custom-star-rating__star.filled {
    fill: #ffa500;
  }

  .custom-star-rating__star.half {
    fill: url(#half-star-gradient);
  }

  .custom-star-rating__text {
    font-size: 14px;
    color: #666;
  }
</style>

<svg style="display: none;">
  <defs>
    <linearGradient id="half-star-gradient">
      <stop offset="50%" stop-color="#ffa500"/>
      <stop offset="50%" stop-color="#e0e0e0"/>
    </linearGradient>
  </defs>
</svg>

<div class="custom-star-rating" onclick="document.querySelector('.yotpo-main-widget, .yotpo-reviews-carousel, [id*=yotpo]')?.scrollIntoView({ behavior: 'smooth', block: 'start' })">
  <div class="custom-star-rating__stars"></div>
  <span class="custom-star-rating__text"></span>
</div>

<script>
(function() {
  const debugPanel = document.getElementById('debug-log');

  function debugLog(message) {
    if (debugPanel) {
      debugPanel.innerHTML += message + '<br>';
    }
    console.log(message);
  }

  function extractYotpoData() {
    debugLog('‚è≥ Attempting to extract Yotpo data...');

    // Try multiple selectors to find the review text
    let yotpoText = null;
    const selectors = [
      '.yotpo-bottom-line-basic-text',
      '.yotpo-bottomline .text-m',
      '.yotpo-bottomline-box-1 .text-m',
      '[class*="yotpo"][class*="bottom"]',
      '.yotpo .text-m'
    ];

    for (let selector of selectors) {
      yotpoText = document.querySelector(selector);
      if (yotpoText && yotpoText.textContent.toLowerCase().includes('review')) {
        debugLog('‚úÖ Found review text with selector: ' + selector);
        break;
      } else if (yotpoText) {
        debugLog('‚ö†Ô∏è Found element with ' + selector + ' but no review text: "' + (yotpoText.textContent || '').substring(0, 50) + '"');
        yotpoText = null;
      }
    }

    // If still not found, search all Yotpo elements for review text
    if (!yotpoText) {
      debugLog('‚ö†Ô∏è Specific selectors failed, searching all Yotpo elements...');
      const allYotpo = document.querySelectorAll('[class*="yotpo"]');
      debugLog('Total elements with "yotpo" in class: ' + allYotpo.length);

      // Log sample elements to see what we're dealing with
      let loggedCount = 0;
      let foundBottomLine = false;

      for (let element of allYotpo) {
        const text = (element.textContent || '').trim();
        const classes = element.className || '';

        // Check if this is the bottom-line element we're looking for
        if (classes.includes('bottom-line')) {
          foundBottomLine = true;
          debugLog('  üéØ Found bottom-line element: "' + classes.substring(0, 50) + '"');
          debugLog('     Text content (' + text.length + ' chars): "' + text.substring(0, 100) + '"');
        }

        // Show sample of what we're finding
        if (loggedCount < 5) {
          debugLog('  [' + loggedCount + '] "' + classes.substring(0, 40) + '...": "' + text.substring(0, 40) + '"');
          loggedCount++;
        }

        // Look for review text more loosely
        if (text.toLowerCase().includes('review')) {
          yotpoText = element;
          debugLog('‚úÖ Found review text in element with classes: ' + element.className);
          debugLog('üìù Text content: "' + text + '"');
          break;
        }
      }

      if (!yotpoText) {
        debugLog('‚ùå No element found containing "review" in text');
        if (!foundBottomLine) {
          debugLog('‚ö†Ô∏è Also did not find any element with "bottom-line" in class name');
        }
      }
    }

    if (!yotpoText) {
      debugLog('‚ùå Cannot find Yotpo review text anywhere on page');
      return null;
    }

    const text = yotpoText.textContent || yotpoText.innerText;
    debugLog('üìù Yotpo text content: "' + text + '"');

    const countMatch = text.match(/(\d+)\s+review/i);

    if (!countMatch) {
      debugLog('‚ùå No review count match found in text');
      return null;
    }

    const reviewCount = parseInt(countMatch[1], 10);
    debugLog('‚úÖ Review count extracted: ' + reviewCount);

    // Extract rating from aria-label or data attributes
    let rating = 0;

    // Try to find rating in aria-label
    const ariaElements = document.querySelectorAll('[aria-label*="star"]');
    for (let el of ariaElements) {
      const ariaLabel = el.getAttribute('aria-label') || '';
      const ratingMatch = ariaLabel.match(/([\d.]+)\s+star/i);
      if (ratingMatch) {
        rating = parseFloat(ratingMatch[1]);
        debugLog('‚≠ê Rating from aria-label: ' + rating);
        break;
      }
    }

    // Try to find rating in the bottom-line score text
    if (!rating) {
      const scoreElements = document.querySelectorAll('.yotpo-bottom-line-score, .yotpo-sr-bottom-line-score, [class*="score"]');
      for (let el of scoreElements) {
        const scoreText = (el.textContent || '').trim();
        const scoreMatch = scoreText.match(/^([\d.]+)$/);
        if (scoreMatch) {
          rating = parseFloat(scoreMatch[1]);
          debugLog('‚≠ê Rating from score text: ' + rating);
          break;
        }
      }
    }

    // Fallback: count filled stars
    if (!rating) {
      const allStarSelectors = [
        '.yotpo-icon-star:not(.yotpo-icon-empty-star)',
        '[class*="star"][class*="filled"]',
        '.yotpo-star.filled'
      ];

      for (let selector of allStarSelectors) {
        const filledStars = document.querySelectorAll(selector);
        if (filledStars.length > 0 && filledStars.length <= 5) {
          rating = filledStars.length;
          debugLog('‚≠ê Rating from counting stars (' + selector + '): ' + rating);
          break;
        }
      }
    }

    // Final fallback: default to 5.0 if we have reviews but no rating
    if (!rating && reviewCount > 0) {
      rating = 5.0;
      debugLog('‚≠ê Using default rating of 5.0 (could not extract from page)');
    }

    debugLog('‚úÖ Final extracted data: rating=' + rating + ', count=' + reviewCount);
    return { rating, reviewCount };
  }

  function renderStars(rating) {
    const starsHtml = [];
    for (let i = 1; i <= 5; i++) {
      const starClass = rating >= i ? 'filled' : (rating >= i - 0.5 ? 'half' : '');
      starsHtml.push(`
        <svg class="custom-star-rating__star ${starClass}" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      `);
    }
    return starsHtml.join('');
  }

  let hasLoaded = false;
  let attemptCount = 0;

  function updateCustomRating() {
    attemptCount++;
    debugLog('---');
    debugLog('üîÑ Attempt #' + attemptCount + ' - updateCustomRating called');
    debugLog('hasLoaded: ' + hasLoaded);

    if (hasLoaded) {
      debugLog('‚è≠Ô∏è Already loaded, skipping');
      return;
    }

    const data = extractYotpoData();

    if (!data || data.reviewCount === 0) {
      debugLog('‚ö†Ô∏è No data or reviewCount is 0, will try again later');
      return;
    }

    const customRating = document.querySelector('.custom-star-rating');
    debugLog('Custom rating container found: ' + (customRating ? '‚úÖ YES' : '‚ùå NO'));
    if (!customRating) {
      debugLog('‚ùå Cannot find .custom-star-rating element');
      return;
    }

    const starsContainer = customRating.querySelector('.custom-star-rating__stars');
    const textContainer = customRating.querySelector('.custom-star-rating__text');

    if (starsContainer && textContainer) {
      starsContainer.innerHTML = renderStars(data.rating);
      textContainer.textContent = `${data.rating.toFixed(1)} (${data.reviewCount} ${data.reviewCount === 1 ? 'review' : 'reviews'})`;
      customRating.classList.add('loaded');
      hasLoaded = true;
      debugLog('üéâ SUCCESS! Custom stars loaded and displayed!');
      debugLog('---');
    } else {
      debugLog('‚ùå Stars or text container not found inside .custom-star-rating');
    }
  }

  // Try immediately
  debugLog('üöÄ Script started');
  updateCustomRating();

  // Try after DOM loaded
  if (document.readyState === 'loading') {
    debugLog('‚è≥ Waiting for DOM to load...');
    document.addEventListener('DOMContentLoaded', function() {
      debugLog('‚úÖ DOM loaded');
      updateCustomRating();
    });
  }

  // Watch for Yotpo widget to appear in DOM
  debugLog('üëÄ Starting MutationObserver to watch for Yotpo...');
  const observer = new MutationObserver(function(mutations) {
    if (hasLoaded) {
      observer.disconnect();
      return;
    }

    for (let mutation of mutations) {
      if (mutation.addedNodes.length > 0) {
        // Check if Yotpo bottomline was added
        const yotpoAdded = Array.from(mutation.addedNodes).some(node =>
          node.nodeType === 1 && (
            node.classList?.contains('yotpo-bottomline') ||
            node.querySelector?.('.yotpo-bottomline')
          )
        );

        if (yotpoAdded) {
          debugLog('üîî MutationObserver detected Yotpo widget added!');
          setTimeout(updateCustomRating, 100); // Small delay for Yotpo to fully render
          break;
        }
      }
    }
  });

  // Start observing
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });

  // Fallback timeouts in case MutationObserver misses it
  debugLog('‚è∞ Setting fallback timeouts at 500ms, 1500ms, 3000ms, and 5000ms...');
  setTimeout(function() {
    debugLog('‚è∞ 500ms timeout triggered');
    updateCustomRating();
  }, 500);
  setTimeout(function() {
    debugLog('‚è∞ 1500ms timeout triggered');
    updateCustomRating();
  }, 1500);
  setTimeout(function() {
    debugLog('‚è∞ 3000ms timeout triggered');
    updateCustomRating();
  }, 3000);
  setTimeout(function() {
    debugLog('‚è∞ 5000ms timeout triggered (final attempt)');
    updateCustomRating();
  }, 5000);

  // Listen for Yotpo events
  debugLog('üëÇ Listening for Yotpo events...');
  document.addEventListener('yotpo.bottomline.loaded', function() {
    debugLog('üîî yotpo.bottomline.loaded event fired!');
    updateCustomRating();
  });
  window.addEventListener('yotpo.initialized', function() {
    debugLog('üîî yotpo.initialized event fired!');
    updateCustomRating();
  });

  // Cleanup observer after 10 seconds
  setTimeout(() => {
    observer.disconnect();
    debugLog('üõë MutationObserver stopped after 10 seconds');
  }, 10000);
})();
</script>
