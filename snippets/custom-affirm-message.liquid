{% comment %}
  Custom Affirm Message
  Fast-loading alternative to Affirm app block
  Triggers Affirm modal on click
{% endcomment %}

{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign price = selected_variant.price -%}
{%- assign installment = price | divided_by: 4 -%}

<style>
  .custom-affirm-message {
    margin: 12px 0;
    font-size: 14px;
    line-height: 1.5;
  }

  .custom-affirm-message__main {
    display: flex;
    align-items: center;
    gap: 6px;
    cursor: pointer;
  }

  .custom-affirm-message__main:hover .custom-affirm-message__logo-text {
    text-decoration: underline;
  }

  .custom-affirm-message__text {
    color: #333;
  }

  .custom-affirm-message__price {
    font-weight: 600;
  }

  .custom-affirm-message__logo {
    display: inline-block;
    margin-left: 2px;
  }

  .custom-affirm-message__logo-text {
    color: #4A4AF4;
    font-weight: 700;
    text-decoration: none;
  }

  .custom-affirm-message__logo-text svg {
    display: inline-block;
    vertical-align: middle;
    width: auto;
    height: 1em;
  }

  .custom-affirm-message__link {
    display: inline-block;
    margin-top: 4px;
    color: #4A4AF4;
    font-size: 13px;
    text-decoration: underline;
    cursor: pointer;
  }

  .custom-affirm-message__link:hover {
    color: #3939c9;
  }

  .custom-affirm-message__skeleton {
    display: inline-flex;
    align-items: center;
    gap: 4px;
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .custom-affirm-message__skeleton.hidden {
    display: none;
  }

  .skeleton-price-text {
    background: linear-gradient(90deg, #f0f0f0 0%, #e0e0e0 50%, #f0f0f0 100%);
    background-size: 200% 100%;
    height: 1em;
    width: 2.5em;
    border-radius: 3px;
    display: inline-block;
    vertical-align: baseline;
    position: relative;
    top: 0.1em;
    animation: skeletonShimmerAnimation 2s ease-in-out infinite;
  }

  @keyframes skeletonShimmerAnimation {
    0% {
      background-position: 200% 0;
      opacity: 0.6;
    }
    50% {
      opacity: 0.8;
    }
    100% {
      background-position: -200% 0;
      opacity: 0.6;
    }
  }
</style>

<div class="custom-affirm-message" data-product-price="{{ price }}">
  <div class="custom-affirm-message__main">
    <span class="custom-affirm-message__text">
      4 interest-free payments or as low as
      <span class="custom-affirm-message__skeleton" id="affirm-skeleton-loader">
        <span class="skeleton-price-text"></span>
      </span>
      <span class="custom-affirm-message__price" style="display: none;"></span>
      <span id="custom-affirm-suffix" style="display: none;">/mo with
      <span class="custom-affirm-message__logo-text affirm-modal-trigger"
            data-page-type="product"
            data-amount="{{ price }}" id="custom-affirm-logo-container"></span></span>
    </span>
  </div>
  <a class="custom-affirm-message__link affirm-modal-trigger"
     data-page-type="product"
     data-amount="{{ price }}"
     aria-label="Check your purchasing power - Learn more about Affirm Financing (opens in modal)">
    Check your purchasing power
  </a>
</div>

<script>
  // DEBUG: Check if Affirm is loaded
  console.log('[AFFIRM DEBUG] Checking Affirm availability...');
  console.log('[AFFIRM DEBUG] window.affirm exists:', typeof window.affirm !== 'undefined');
  console.log('[AFFIRM DEBUG] window.affirm object:', window.affirm);

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    console.log('[AFFIRM DEBUG] DOM loaded, checking Affirm again...');
    console.log('[AFFIRM DEBUG] window.affirm:', window.affirm);

    // Watch for Affirm's dynamic price to appear and hide skeleton
    const affirmAnchor = document.querySelector('#affirm-under-price');
    const skeletonLoader = document.querySelector('#affirm-skeleton-loader');

    console.log('[AFFIRM SKELETON DEBUG] affirmAnchor found:', !!affirmAnchor);
    console.log('[AFFIRM SKELETON DEBUG] skeletonLoader found:', !!skeletonLoader);
    console.log('[AFFIRM SKELETON DEBUG] affirmAnchor element:', affirmAnchor);

    if (affirmAnchor && skeletonLoader) {
      const customPriceElement = document.querySelector('.custom-affirm-message__price');
      const customLogoContainer = document.querySelector('#custom-affirm-logo-container');
      const customAffirmSuffix = document.querySelector('#custom-affirm-suffix');
      const customStarRating = document.querySelector('.custom-star-rating');

      let affirmReady = false;
      let starRatingReady = false;

      // Function to check if we should show everything
      function checkIfReadyToShow() {
        console.log('[AFFIRM SKELETON DEBUG] Checking if ready to show...');
        console.log('[AFFIRM SKELETON DEBUG] affirmReady:', affirmReady);
        console.log('[AFFIRM SKELETON DEBUG] starRatingReady:', starRatingReady);

        // If star rating exists, wait for both. If not, just wait for Affirm
        const shouldWaitForStars = customStarRating !== null;
        const readyToShow = affirmReady && (!shouldWaitForStars || starRatingReady);

        if (readyToShow) {
          console.log('[AFFIRM SKELETON DEBUG] Ready to show! Revealing content...');
          // Hide skeleton and show the price
          skeletonLoader.classList.add('hidden');
          if (customPriceElement) {
            customPriceElement.style.display = 'inline';
          }

          // Show the "/mo with" text
          if (customAffirmSuffix) {
            customAffirmSuffix.style.display = 'inline';
          }
        }

        return readyToShow;
      }

      // Function to extract and display the monthly price
      function updateMonthlyPrice() {
        const affirmPriceElement = affirmAnchor.querySelector('.affirm-ala-price');
        const affirmLogoElement = affirmAnchor.querySelector('.__affirm-logo');

        console.log('[AFFIRM SKELETON DEBUG] Checking for price...');
        console.log('[AFFIRM SKELETON DEBUG] affirmPriceElement:', affirmPriceElement);
        console.log('[AFFIRM SKELETON DEBUG] affirmPriceElement text:', affirmPriceElement?.textContent);
        console.log('[AFFIRM SKELETON DEBUG] affirmLogoElement:', affirmLogoElement);

        if (affirmPriceElement && affirmPriceElement.textContent.trim() && affirmLogoElement) {
          // Check if logo styles are loaded by checking font-family
          const logoStyles = window.getComputedStyle(affirmLogoElement);
          const fontFamily = logoStyles.fontFamily;
          console.log('[AFFIRM SKELETON DEBUG] Logo font-family:', fontFamily);

          // Only proceed if Affirm's font is loaded (contains 'affirm' in font family)
          if (!fontFamily || fontFamily.toLowerCase().indexOf('affirm') === -1) {
            console.log('[AFFIRM SKELETON DEBUG] Logo styles not ready yet, waiting...');
            return false;
          }

          // Check if the font file is actually loaded using the Font Loading API
          if (document.fonts && document.fonts.check) {
            try {
              const fontLoaded = document.fonts.check('1em affirm');
              console.log('[AFFIRM SKELETON DEBUG] Font file loaded check:', fontLoaded);

              if (!fontLoaded) {
                console.log('[AFFIRM SKELETON DEBUG] Font file not loaded yet, waiting...');
                return false;
              }
            } catch (e) {
              console.log('[AFFIRM SKELETON DEBUG] Font check failed, proceeding anyway:', e);
            }
          }

          const monthlyPrice = affirmPriceElement.textContent.trim();
          console.log('[AFFIRM SKELETON DEBUG] Extracted monthly price:', monthlyPrice);

          // Store the price (but don't show yet)
          if (customPriceElement) {
            customPriceElement.textContent = monthlyPrice;
          }

          // Add Affirm logo SVG directly
          if (customLogoContainer) {
            console.log('[AFFIRM SKELETON DEBUG] Adding Affirm logo SVG...');

            // Use Affirm's official logo SVG
            customLogoContainer.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 60" style="height: 0.9em; width: auto; vertical-align: baseline; position: relative; top: 0.05em;"><path fill="#0FA0EA" d="M12.9 17.8c-1.7 0-3 1.4-3 3 0 1.7 1.4 3 3 3s3-1.4 3-3c0-1.7-1.3-3-3-3zM121.8 22.3c-1.7 0-3 1.4-3 3s1.3 3 3 3c1.7 0 3-1.4 3-3s-1.3-3-3-3zM70.2 38.2h-6.7V24.5c0-2.6-1-4-3.4-4-2.4 0-4 1.8-4 4.6v13.1H49V24.5c0-2.6-1-4-3.4-4-2.4 0-4 1.8-4 4.6v13.1H34V17.9h7.1v2c1.2-1.5 3.2-2.6 6-2.6 2.8 0 5 1.1 6.3 3.3 1.4-2 3.7-3.3 6.8-3.3 4.6 0 7.6 3 7.6 7.9v12.9h.4zM12.9 42.1c-4.8 0-8.6-3.9-8.6-8.6 0-4.8 3.9-8.6 8.6-8.6 4.8 0 8.6 3.9 8.6 8.6 0 4.8-3.9 8.6-8.6 8.6zM86 42.1c-7.2 0-12.7-5.4-12.7-12.3s5.5-12.3 12.7-12.3c3.7 0 6.4 1.3 8.4 3.2l-3.7 4.6c-1.2-1-2.6-1.7-4.4-1.7-3.1 0-5.6 2.5-5.6 6.2 0 3.7 2.4 6.2 5.6 6.2 1.8 0 3.2-.7 4.4-1.8l3.7 4.6c-2 2-4.7 3.3-8.4 3.3zM108.5 42.1c-7.2 0-12.8-5.4-12.8-12.3s5.6-12.3 12.8-12.3 12.8 5.4 12.8 12.3-5.6 12.3-12.8 12.3zm0-6.2c3 0 5.3-2.5 5.3-6.1s-2.3-6.1-5.3-6.1c-3 0-5.3 2.5-5.3 6.1s2.3 6.1 5.3 6.1zM121.8 42.1c-4.8 0-8.6-3.9-8.6-8.6 0-4.8 3.9-8.6 8.6-8.6 4.8 0 8.6 3.9 8.6 8.6 0 4.8-3.9 8.6-8.6 8.6zM172.5 38.2h-7.2V32c-1.3 4-4.4 6.1-8 6.1-5.3 0-8.6-3.6-8.6-9V17.9h7.2v10.3c0 3 1.4 4.7 4 4.7s4.2-1.7 4.2-5.1V17.9h7.2v20.3h1.2zM182.5 21.5c-2.7 0-4.6 2.1-4.6 5.4v11.3H171V17.9h7.2v2.5c1.1-1.8 3-3 5.5-3h1.4v6.8c-.5-.5-1.4-1.1-2.1-1.1l-.5-1.6zM193 24.8c-2.6 0-4.4 2-4.4 5.2 0 3.2 1.8 5.2 4.4 5.2 1.4 0 2.5-.6 3.3-1.5l4.3 4c-1.8 2.2-4.6 3.5-8.2 3.5-6.8 0-11.5-4.9-11.5-11.2 0-6.4 4.7-11.2 11.5-11.2 3.6 0 6.4 1.3 8.2 3.5l-4.3 4c-.8-.9-1.9-1.5-3.3-1.5zM221 38.2h-7.2V32c-1.3 4-4.4 6.1-8 6.1-5.3 0-8.6-3.6-8.6-9V17.9h7.2v10.3c0 3 1.4 4.7 4 4.7s4.2-1.7 4.2-5.1V17.9h7.2v20.3H221zM235.2 17.9h-4.6v20.3h-7.2V17.9h-3v-6.2h3V6.1h7.2v5.6h4.6v6.2z"/></svg>';

            console.log('[AFFIRM SKELETON DEBUG] Added Affirm logo SVG!');
          }

          console.log('[AFFIRM SKELETON DEBUG] Affirm data ready!');
          affirmReady = true;
          checkIfReadyToShow();
          return true;
        }
        return false;
      }

      // Watch for star rating to finish loading
      if (customStarRating) {
        console.log('[AFFIRM SKELETON DEBUG] Star rating element found, watching for load...');
        const starRatingObserver = new MutationObserver(function() {
          if (customStarRating.classList.contains('loaded')) {
            console.log('[AFFIRM SKELETON DEBUG] Star rating loaded!');
            starRatingReady = true;
            checkIfReadyToShow();
            starRatingObserver.disconnect();
          }
        });

        starRatingObserver.observe(customStarRating, {
          attributes: true,
          attributeFilter: ['class']
        });

        // Check if already loaded
        if (customStarRating.classList.contains('loaded')) {
          console.log('[AFFIRM SKELETON DEBUG] Star rating already loaded!');
          starRatingReady = true;
        }

        // Timeout: show after 5 seconds even if star rating not loaded
        setTimeout(function() {
          if (!starRatingReady) {
            console.log('[AFFIRM SKELETON DEBUG] Star rating timeout reached, proceeding anyway...');
            starRatingReady = true;
            checkIfReadyToShow();
          }
        }, 5000);
      } else {
        console.log('[AFFIRM SKELETON DEBUG] No star rating element found, not waiting for it');
        starRatingReady = true;
      }

      // Use MutationObserver to watch for Affirm adding content
      const observer = new MutationObserver(function(mutations) {
        console.log('[AFFIRM SKELETON DEBUG] MutationObserver triggered. Mutations:', mutations.length);
        console.log('[AFFIRM SKELETON DEBUG] affirmAnchor innerHTML:', affirmAnchor.innerHTML);

        if (updateMonthlyPrice()) {
          observer.disconnect();
        }
      });

      observer.observe(affirmAnchor, {
        childList: true,
        subtree: true,
        characterData: true
      });

      // Fallback: also check periodically
      let checkCount = 0;
      const checkAffirmPrice = setInterval(function() {
        checkCount++;
        console.log('[AFFIRM SKELETON DEBUG] Interval check #' + checkCount);
        console.log('[AFFIRM SKELETON DEBUG] affirmAnchor innerHTML:', affirmAnchor.innerHTML);

        if (updateMonthlyPrice()) {
          clearInterval(checkAffirmPrice);
        }
      }, 500);

      // Stop checking after 10 seconds
      setTimeout(function() {
        console.log('[AFFIRM SKELETON DEBUG] Timeout reached (10s). Final state:');
        console.log('[AFFIRM SKELETON DEBUG] affirmAnchor innerHTML:', affirmAnchor.innerHTML);

        // One final attempt
        if (!updateMonthlyPrice()) {
          console.log('[AFFIRM SKELETON DEBUG] Price never loaded, keeping skeleton visible');
        }

        clearInterval(checkAffirmPrice);
      }, 10000);
    } else {
      console.error('[AFFIRM SKELETON DEBUG] Missing required elements!');
      console.error('[AFFIRM SKELETON DEBUG] affirmAnchor:', affirmAnchor);
      console.error('[AFFIRM SKELETON DEBUG] skeletonLoader:', skeletonLoader);
    }

    // Check if Affirm triggers exist
    const triggers = document.querySelectorAll('.affirm-modal-trigger');
    console.log('[AFFIRM DEBUG] Found', triggers.length, 'Affirm modal triggers');

    // Add manual click handlers with debugging
    triggers.forEach(function(trigger, index) {
      console.log('[AFFIRM DEBUG] Setting up trigger', index, trigger);

      trigger.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();

        console.log('[AFFIRM DEBUG] Trigger clicked!', index);
        console.log('[AFFIRM DEBUG] window.affirm at click time:', window.affirm);
        console.log('[AFFIRM DEBUG] window.affirm.ui:', window.affirm?.ui);

        // Try manual modal trigger
        if (window.affirm && window.affirm.ui) {
          console.log('[AFFIRM DEBUG] Attempting to open modal...');
          console.log('[AFFIRM DEBUG] Available affirm.ui methods:', Object.keys(window.affirm.ui));

          const price = trigger.getAttribute('data-amount');
          console.log('[AFFIRM DEBUG] Price:', price);

          // Try method 1: openModal (most common)
          if (typeof window.affirm.ui.openModal === 'function') {
            console.log('[AFFIRM DEBUG] Using affirm.ui.openModal');
            try {
              window.affirm.ui.openModal();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling openModal:', err);
            }
          }
          // Try method 2: prequal (prequalification modal)
          else if (typeof window.affirm.ui.prequal === 'function') {
            console.log('[AFFIRM DEBUG] Using affirm.ui.prequal');
            try {
              window.affirm.ui.prequal.show();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling prequal:', err);
            }
          }
          // Try method 3: error.modal
          else if (window.affirm.ui.error && window.affirm.ui.error.modal) {
            console.log('[AFFIRM DEBUG] Using affirm.ui.error.modal');
            try {
              window.affirm.ui.error.modal();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling error.modal:', err);
            }
          }
          else {
            console.error('[AFFIRM DEBUG] No known modal method found!');
            window.open('https://www.affirm.com/how-it-works', '_blank');
          }
        } else {
          console.error('[AFFIRM DEBUG] Affirm not loaded yet!');
          window.open('https://www.affirm.com/how-it-works', '_blank');
        }
      });
    });
  });

  // Check periodically for Affirm loading
  let checkCount = 0;
  const checkInterval = setInterval(function() {
    checkCount++;
    console.log('[AFFIRM DEBUG] Check #' + checkCount, 'window.affirm:', window.affirm);

    if (window.affirm || checkCount >= 10) {
      clearInterval(checkInterval);
      console.log('[AFFIRM DEBUG] Stopped checking. Final state:', window.affirm);
    }
  }, 1000);

  // Update price when variant changes
  document.addEventListener('variant:changed', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      // Update displayed price
      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);
        priceElement.textContent = formatted;
      }

      // Update data attributes for Affirm
      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }

      // Update all affirm triggers
      document.querySelectorAll('.custom-affirm-message .affirm-modal-trigger').forEach(function(el) {
        el.setAttribute('data-amount', newPrice);
      });
    }
  });

  // Also listen for product:variant:change event
  document.addEventListener('product:variant:change', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);
        priceElement.textContent = formatted;
      }

      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }

      document.querySelectorAll('.custom-affirm-message .affirm-modal-trigger').forEach(function(el) {
        el.setAttribute('data-amount', newPrice);
      });
    }
  });

  // Update price when variant changes
  document.addEventListener('variant:changed', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        // Format as money
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);

        priceElement.textContent = formatted;
      }

      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }
    }
  });
</script>
