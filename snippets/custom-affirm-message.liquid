{% comment %}
  Custom Affirm Message
  Fast-loading alternative to Affirm app block
  Triggers Affirm modal on click
{% endcomment %}

{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign price = selected_variant.price -%}
{%- assign installment = price | divided_by: 4 -%}

<style>
  .custom-affirm-message {
    margin: 12px 0;
    font-size: 14px;
    line-height: 1.5;
  }

  .custom-affirm-message__main {
    display: flex;
    align-items: center;
    gap: 6px;
    cursor: pointer;
  }

  .custom-affirm-message__main:hover .custom-affirm-message__logo-text {
    text-decoration: underline;
  }

  .custom-affirm-message__text {
    color: #333;
  }

  .custom-affirm-message__price {
    font-weight: 600;
  }

  .custom-affirm-message__logo {
    display: inline-block;
    margin-left: 2px;
  }

  .custom-affirm-message__logo-text {
    color: #4A4AF4;
    font-weight: 700;
    text-decoration: none;
  }

  .custom-affirm-message__link {
    display: inline-block;
    margin-top: 4px;
    color: #4A4AF4;
    font-size: 13px;
    text-decoration: underline;
    cursor: pointer;
  }

  .custom-affirm-message__link:hover {
    color: #3939c9;
  }

  .custom-affirm-message__skeleton {
    display: inline-flex;
    align-items: center;
    gap: 4px;
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .custom-affirm-message__skeleton.hidden {
    display: none;
  }

  .skeleton-price-text {
    background: linear-gradient(90deg, #f0f0f0 0%, #e0e0e0 50%, #f0f0f0 100%);
    background-size: 200% 100%;
    height: 1em;
    width: 2.5em;
    border-radius: 3px;
    display: inline-block;
    vertical-align: baseline;
    position: relative;
    top: 0.1em;
    animation: skeletonShimmerAnimation 2s ease-in-out infinite;
  }

  @keyframes skeletonShimmerAnimation {
    0% {
      background-position: 200% 0;
      opacity: 0.6;
    }
    50% {
      opacity: 0.8;
    }
    100% {
      background-position: -200% 0;
      opacity: 0.6;
    }
  }
</style>

<div class="custom-affirm-message" data-product-price="{{ price }}">
  <div class="custom-affirm-message__main">
    <span class="custom-affirm-message__text">
      4 interest-free payments or as low as
      <span class="custom-affirm-message__skeleton" id="affirm-skeleton-loader">
        <span class="skeleton-price-text"></span>
      </span>
      <span class="custom-affirm-message__price" style="display: none;"></span>
      <span id="custom-affirm-suffix" style="display: none;">/mo with
      <span class="custom-affirm-message__logo-text affirm-modal-trigger"
            data-page-type="product"
            data-amount="{{ price }}" id="custom-affirm-logo-container"></span></span>
    </span>
  </div>
  <a class="custom-affirm-message__link affirm-modal-trigger"
     data-page-type="product"
     data-amount="{{ price }}"
     aria-label="Check your purchasing power - Learn more about Affirm Financing (opens in modal)">
    Check your purchasing power
  </a>
</div>

<script>
  // DEBUG: Check if Affirm is loaded
  console.log('[AFFIRM DEBUG] Checking Affirm availability...');
  console.log('[AFFIRM DEBUG] window.affirm exists:', typeof window.affirm !== 'undefined');
  console.log('[AFFIRM DEBUG] window.affirm object:', window.affirm);

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    console.log('[AFFIRM DEBUG] DOM loaded, checking Affirm again...');
    console.log('[AFFIRM DEBUG] window.affirm:', window.affirm);

    // Watch for Affirm's dynamic price to appear and hide skeleton
    const affirmAnchor = document.querySelector('#affirm-under-price');
    const skeletonLoader = document.querySelector('#affirm-skeleton-loader');

    console.log('[AFFIRM SKELETON DEBUG] affirmAnchor found:', !!affirmAnchor);
    console.log('[AFFIRM SKELETON DEBUG] skeletonLoader found:', !!skeletonLoader);
    console.log('[AFFIRM SKELETON DEBUG] affirmAnchor element:', affirmAnchor);

    if (affirmAnchor && skeletonLoader) {
      const customPriceElement = document.querySelector('.custom-affirm-message__price');
      const customLogoContainer = document.querySelector('#custom-affirm-logo-container');
      const customAffirmSuffix = document.querySelector('#custom-affirm-suffix');

      // Function to extract and display the monthly price
      function updateMonthlyPrice() {
        const affirmPriceElement = affirmAnchor.querySelector('.affirm-ala-price');
        const affirmLogoElement = affirmAnchor.querySelector('.__affirm-logo.__processed');

        console.log('[AFFIRM SKELETON DEBUG] Checking for price...');
        console.log('[AFFIRM SKELETON DEBUG] affirmPriceElement:', affirmPriceElement);
        console.log('[AFFIRM SKELETON DEBUG] affirmPriceElement text:', affirmPriceElement?.textContent);
        console.log('[AFFIRM SKELETON DEBUG] affirmLogoElement (processed):', affirmLogoElement);

        if (affirmPriceElement && affirmPriceElement.textContent.trim() && affirmLogoElement) {
          const monthlyPrice = affirmPriceElement.textContent.trim();
          console.log('[AFFIRM SKELETON DEBUG] Extracted monthly price:', monthlyPrice);

          // Hide skeleton and show the price
          skeletonLoader.classList.add('hidden');
          if (customPriceElement) {
            customPriceElement.textContent = monthlyPrice;
            customPriceElement.style.display = 'inline';
          }

          // Show the "/mo with" text
          if (customAffirmSuffix) {
            customAffirmSuffix.style.display = 'inline';
          }

          // Replace with processed Affirm logo
          if (customLogoContainer) {
            console.log('[AFFIRM SKELETON DEBUG] Logo element found and processed, cloning...');
            console.log('[AFFIRM SKELETON DEBUG] Logo HTML:', affirmLogoElement.outerHTML);

            // Clone the fully processed logo
            const logoClone = affirmLogoElement.cloneNode(true);
            customLogoContainer.innerHTML = '';
            customLogoContainer.appendChild(logoClone);

            console.log('[AFFIRM SKELETON DEBUG] Replaced with Affirm logo!');
            console.log('[AFFIRM SKELETON DEBUG] Container HTML after:', customLogoContainer.innerHTML);
          }

          console.log('[AFFIRM SKELETON DEBUG] Updated custom message with monthly price!');
          return true;
        }
        return false;
      }

      // Use MutationObserver to watch for Affirm adding content
      const observer = new MutationObserver(function(mutations) {
        console.log('[AFFIRM SKELETON DEBUG] MutationObserver triggered. Mutations:', mutations.length);
        console.log('[AFFIRM SKELETON DEBUG] affirmAnchor innerHTML:', affirmAnchor.innerHTML);

        if (updateMonthlyPrice()) {
          observer.disconnect();
        }
      });

      observer.observe(affirmAnchor, {
        childList: true,
        subtree: true,
        characterData: true
      });

      // Fallback: also check periodically
      let checkCount = 0;
      const checkAffirmPrice = setInterval(function() {
        checkCount++;
        console.log('[AFFIRM SKELETON DEBUG] Interval check #' + checkCount);
        console.log('[AFFIRM SKELETON DEBUG] affirmAnchor innerHTML:', affirmAnchor.innerHTML);

        if (updateMonthlyPrice()) {
          clearInterval(checkAffirmPrice);
        }
      }, 500);

      // Stop checking after 10 seconds
      setTimeout(function() {
        console.log('[AFFIRM SKELETON DEBUG] Timeout reached (10s). Final state:');
        console.log('[AFFIRM SKELETON DEBUG] affirmAnchor innerHTML:', affirmAnchor.innerHTML);

        // One final attempt
        if (!updateMonthlyPrice()) {
          console.log('[AFFIRM SKELETON DEBUG] Price never loaded, keeping skeleton visible');
        }

        clearInterval(checkAffirmPrice);
      }, 10000);
    } else {
      console.error('[AFFIRM SKELETON DEBUG] Missing required elements!');
      console.error('[AFFIRM SKELETON DEBUG] affirmAnchor:', affirmAnchor);
      console.error('[AFFIRM SKELETON DEBUG] skeletonLoader:', skeletonLoader);
    }

    // Check if Affirm triggers exist
    const triggers = document.querySelectorAll('.affirm-modal-trigger');
    console.log('[AFFIRM DEBUG] Found', triggers.length, 'Affirm modal triggers');

    // Add manual click handlers with debugging
    triggers.forEach(function(trigger, index) {
      console.log('[AFFIRM DEBUG] Setting up trigger', index, trigger);

      trigger.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();

        console.log('[AFFIRM DEBUG] Trigger clicked!', index);
        console.log('[AFFIRM DEBUG] window.affirm at click time:', window.affirm);
        console.log('[AFFIRM DEBUG] window.affirm.ui:', window.affirm?.ui);

        // Try manual modal trigger
        if (window.affirm && window.affirm.ui) {
          console.log('[AFFIRM DEBUG] Attempting to open modal...');
          console.log('[AFFIRM DEBUG] Available affirm.ui methods:', Object.keys(window.affirm.ui));

          const price = trigger.getAttribute('data-amount');
          console.log('[AFFIRM DEBUG] Price:', price);

          // Try method 1: openModal (most common)
          if (typeof window.affirm.ui.openModal === 'function') {
            console.log('[AFFIRM DEBUG] Using affirm.ui.openModal');
            try {
              window.affirm.ui.openModal();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling openModal:', err);
            }
          }
          // Try method 2: prequal (prequalification modal)
          else if (typeof window.affirm.ui.prequal === 'function') {
            console.log('[AFFIRM DEBUG] Using affirm.ui.prequal');
            try {
              window.affirm.ui.prequal.show();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling prequal:', err);
            }
          }
          // Try method 3: error.modal
          else if (window.affirm.ui.error && window.affirm.ui.error.modal) {
            console.log('[AFFIRM DEBUG] Using affirm.ui.error.modal');
            try {
              window.affirm.ui.error.modal();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling error.modal:', err);
            }
          }
          else {
            console.error('[AFFIRM DEBUG] No known modal method found!');
            window.open('https://www.affirm.com/how-it-works', '_blank');
          }
        } else {
          console.error('[AFFIRM DEBUG] Affirm not loaded yet!');
          window.open('https://www.affirm.com/how-it-works', '_blank');
        }
      });
    });
  });

  // Check periodically for Affirm loading
  let checkCount = 0;
  const checkInterval = setInterval(function() {
    checkCount++;
    console.log('[AFFIRM DEBUG] Check #' + checkCount, 'window.affirm:', window.affirm);

    if (window.affirm || checkCount >= 10) {
      clearInterval(checkInterval);
      console.log('[AFFIRM DEBUG] Stopped checking. Final state:', window.affirm);
    }
  }, 1000);

  // Update price when variant changes
  document.addEventListener('variant:changed', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      // Update displayed price
      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);
        priceElement.textContent = formatted;
      }

      // Update data attributes for Affirm
      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }

      // Update all affirm triggers
      document.querySelectorAll('.custom-affirm-message .affirm-modal-trigger').forEach(function(el) {
        el.setAttribute('data-amount', newPrice);
      });
    }
  });

  // Also listen for product:variant:change event
  document.addEventListener('product:variant:change', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);
        priceElement.textContent = formatted;
      }

      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }

      document.querySelectorAll('.custom-affirm-message .affirm-modal-trigger').forEach(function(el) {
        el.setAttribute('data-amount', newPrice);
      });
    }
  });

  // Update price when variant changes
  document.addEventListener('variant:changed', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        // Format as money
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);

        priceElement.textContent = formatted;
      }

      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }
    }
  });
</script>
