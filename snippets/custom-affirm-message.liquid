{% comment %}
  Custom Affirm Message
  Fast-loading alternative to Affirm app block
  Triggers Affirm modal on click
{% endcomment %}

{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign price = selected_variant.price -%}
{%- assign installment = price | divided_by: 4 -%}

<style>
  .custom-affirm-message {
    margin: 12px 0;
    font-size: 14px;
    line-height: 1.5;
  }

  .custom-affirm-message__main {
    display: flex;
    align-items: center;
    gap: 6px;
    cursor: pointer;
  }

  .custom-affirm-message__main:hover .custom-affirm-message__logo-text {
    text-decoration: underline;
  }

  .custom-affirm-message__text {
    color: #333;
  }

  .custom-affirm-message__price {
    font-weight: 600;
  }

  .custom-affirm-message__logo {
    display: inline-block;
    margin-left: 2px;
  }

  .custom-affirm-message__logo-text {
    color: #0FA0EA;
    font-weight: 700;
    text-decoration: none;
  }

  .custom-affirm-message__link {
    display: inline-block;
    margin-top: 4px;
    color: #0FA0EA;
    font-size: 13px;
    text-decoration: underline;
    cursor: pointer;
  }

  .custom-affirm-message__link:hover {
    color: #0c7db8;
  }
</style>

<div class="custom-affirm-message" data-product-price="{{ price }}">
  <div class="custom-affirm-message__main affirm-modal-trigger"
       data-page-type="product"
       data-amount="{{ price }}">
    <span class="custom-affirm-message__text">
      or 4 interest-free payments of
      <span class="custom-affirm-message__price">{{ installment | money }}</span>
      with
      <span class="custom-affirm-message__logo-text">Affirm</span>
    </span>
  </div>
  <a class="custom-affirm-message__link affirm-modal-trigger"
     data-page-type="product"
     data-amount="{{ price }}"
     aria-label="Check your purchasing power - Learn more about Affirm Financing (opens in modal)">
    Check your purchasing power
  </a>
</div>

<script>
  // DEBUG: Check if Affirm is loaded
  console.log('[AFFIRM DEBUG] Checking Affirm availability...');
  console.log('[AFFIRM DEBUG] window.affirm exists:', typeof window.affirm !== 'undefined');
  console.log('[AFFIRM DEBUG] window.affirm object:', window.affirm);

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    console.log('[AFFIRM DEBUG] DOM loaded, checking Affirm again...');
    console.log('[AFFIRM DEBUG] window.affirm:', window.affirm);

    // Check if Affirm triggers exist
    const triggers = document.querySelectorAll('.affirm-modal-trigger');
    console.log('[AFFIRM DEBUG] Found', triggers.length, 'Affirm modal triggers');

    // Add manual click handlers with debugging
    triggers.forEach(function(trigger, index) {
      console.log('[AFFIRM DEBUG] Setting up trigger', index, trigger);

      trigger.addEventListener('click', function(e) {
        console.log('[AFFIRM DEBUG] Trigger clicked!', index);
        console.log('[AFFIRM DEBUG] window.affirm at click time:', window.affirm);
        console.log('[AFFIRM DEBUG] window.affirm.ui:', window.affirm?.ui);

        // Try manual modal trigger
        if (window.affirm && window.affirm.ui) {
          console.log('[AFFIRM DEBUG] Attempting to open modal...');

          // Try method 1: affirm.ui.error.modal
          if (window.affirm.ui.error && window.affirm.ui.error.modal) {
            console.log('[AFFIRM DEBUG] Using affirm.ui.error.modal');
            try {
              window.affirm.ui.error.modal();
            } catch(err) {
              console.error('[AFFIRM DEBUG] Error calling affirm.ui.error.modal:', err);
            }
          }
          // Try method 2: Check for other modal methods
          else {
            console.log('[AFFIRM DEBUG] Available affirm.ui methods:', Object.keys(window.affirm.ui));
          }
        } else {
          console.error('[AFFIRM DEBUG] Affirm not loaded yet!');
          // Fallback
          window.open('https://www.affirm.com/how-it-works', '_blank');
        }
      });
    });
  });

  // Check periodically for Affirm loading
  let checkCount = 0;
  const checkInterval = setInterval(function() {
    checkCount++;
    console.log('[AFFIRM DEBUG] Check #' + checkCount, 'window.affirm:', window.affirm);

    if (window.affirm || checkCount >= 10) {
      clearInterval(checkInterval);
      console.log('[AFFIRM DEBUG] Stopped checking. Final state:', window.affirm);
    }
  }, 1000);

  // Update price when variant changes
  document.addEventListener('variant:changed', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      // Update displayed price
      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);
        priceElement.textContent = formatted;
      }

      // Update data attributes for Affirm
      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }

      // Update all affirm triggers
      document.querySelectorAll('.custom-affirm-message .affirm-modal-trigger').forEach(function(el) {
        el.setAttribute('data-amount', newPrice);
      });
    }
  });

  // Also listen for product:variant:change event
  document.addEventListener('product:variant:change', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);
        priceElement.textContent = formatted;
      }

      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }

      document.querySelectorAll('.custom-affirm-message .affirm-modal-trigger').forEach(function(el) {
        el.setAttribute('data-amount', newPrice);
      });
    }
  });

  // Update price when variant changes
  document.addEventListener('variant:changed', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.price) {
      const newPrice = e.detail.variant.price;
      const installment = Math.floor(newPrice / 4);

      const priceElement = document.querySelector('.custom-affirm-message__price');
      if (priceElement) {
        // Format as money
        const formatted = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(installment / 100);

        priceElement.textContent = formatted;
      }

      const messageElement = document.querySelector('.custom-affirm-message');
      if (messageElement) {
        messageElement.setAttribute('data-product-price', newPrice);
      }
    }
  });
</script>
