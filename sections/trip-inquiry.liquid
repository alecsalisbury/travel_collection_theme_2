{% comment %}
  Trip Inquiry/Reservation Form Section
  Two-column layout with title/description on left and contact form on right
{% endcomment %}

<section id="trip-inquiry" class="trip-inquiry">
  <div class="container">
    <div class="trip-inquiry__wrapper">
      {% if section.settings.title != blank %}
        <h2 class="trip-inquiry__title">{{ section.settings.title }}</h2>
      {% endif %}

      {% if section.settings.description != blank %}
        <div class="trip-inquiry__description">
          {% assign description_text = section.settings.description | replace: 'this trip', product.title %}
          {{ description_text }}
        </div>
      {% elsif product.title != blank %}
        <div class="trip-inquiry__description">
          <p>Thanks for your interest in {{ product.title }}. Fill out the form below and our team will contact you shortly to discuss availability and details.</p>
        </div>
      {% endif %}

      <div class="trip-inquiry__form">
        {%- form 'contact', id: 'TripInquiryForm', class: 'contact-form' -%}
          <!-- Hidden field to include product name in email -->
          <input type="hidden" name="contact[product]" value="{{ product.title }}">

          {%- if form.posted_successfully? -%}
            <div class="form-message form-message--success" style="
              background-color: #E3F2FA;
              color: #4A9FD8;
              border: 1px solid #4A9FD8;
              padding: 20px;
              border-radius: 4px;
              font-weight: 500;
              margin-bottom: 20px;
            ">
              <strong>Thank you for your inquiry!</strong> A member of our team will contact you shortly to discuss your trip details.
            </div>
          {%- endif -%}

          {%- if form.errors -%}
            <div class="form-message form-message--error" style="margin-bottom: 20px;">
              {{ form.errors | default_errors }}
            </div>
          {%- endif -%}

          <div class="form-row">
            <div class="form-field">
              <input
                autocomplete="given-name"
                type="text"
                id="ContactForm-firstname"
                class="form-input"
                name="contact[first_name]"
                placeholder="First name*"
                required
              >
            </div>

            <div class="form-field">
              <input
                autocomplete="family-name"
                type="text"
                id="ContactForm-lastname"
                class="form-input"
                name="contact[last_name]"
                placeholder="Last name*"
                required
              >
            </div>
          </div>

          <div class="form-row">
            <div class="form-field">
              <input
                autocomplete="email"
                type="email"
                id="ContactForm-email"
                class="form-input"
                name="contact[email]"
                value="{% if form.email %}{{ form.email }}{% elsif customer %}{{ customer.email }}{% endif %}"
                placeholder="Email address*"
                required
              >
            </div>

            <div class="form-field">
              <input
                type="tel"
                id="ContactForm-phone"
                class="form-input"
                name="contact[phone]"
                value="{% if form.phone %}{{ form.phone }}{% elsif customer %}{{ customer.phone }}{% endif %}"
                placeholder="Phone number*"
                required
              >
            </div>
          </div>

          <div class="form-row">
            <div class="form-field date-picker-field">
              <input
                type="text"
                id="ContactForm-dates"
                class="form-input"
                name="contact[dates_interested]"
                placeholder="Select date range (start - end)*"
                required
              >
              <button type="button" class="date-picker-icon" id="calendar-icon">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <line x1="16" y1="2" x2="16" y2="6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <line x1="8" y1="2" x2="8" y2="6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <line x1="3" y1="10" x2="21" y2="10" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
              <div class="date-picker-calendar" id="date-picker-calendar">
                <div class="date-picker-header">
                  <button type="button" class="date-picker-nav" id="prev-month">&larr;</button>
                  <div class="date-picker-month-year" id="month-year"></div>
                  <button type="button" class="date-picker-nav" id="next-month">&rarr;</button>
                </div>
                <div class="date-picker-weekdays">
                  <div>Sun</div>
                  <div>Mon</div>
                  <div>Tue</div>
                  <div>Wed</div>
                  <div>Thu</div>
                  <div>Fri</div>
                  <div>Sat</div>
                </div>
                <div class="date-picker-days" id="calendar-days"></div>
              </div>
            </div>

            <div class="form-field">
              <input
                type="number"
                id="ContactForm-anglers"
                class="form-input"
                name="contact[number_of_anglers]"
                placeholder="Number of anglers*"
                min="0"
                required
              >
            </div>
          </div>

          <div class="form-row">
            <div class="form-field">
              <input
                type="number"
                id="ContactForm-nonanglers"
                class="form-input"
                name="contact[number_of_non_anglers]"
                placeholder="Number of non-anglers*"
                min="0"
                required
              >
            </div>

            <div class="form-field">
              <textarea
                rows="1"
                id="ContactForm-body"
                class="form-input form-textarea"
                name="contact[body]"
                placeholder="Message (optional)"
              >{%- if form.body -%}{{- form.body -}}{%- endif -%}</textarea>
            </div>
          </div>

          <div class="form-row form-row--submit">
            <button type="submit" class="form-submit btn btn--primary">
              {{ section.settings.button_text | default: "Check Availability" }}
            </button>
          </div>
        {%- endform -%}
      </div>
    </div>
  </div>
</section>

<!-- Fixed Scroll Indicator -->
<a href="#" class="scroll-btn" id="scroll-cue-btn">
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M19 9l-7 7-7-7" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
</a>

<style>
  /* Custom Date Picker - Trident Brand Colors */
  .date-picker-field {
    position: relative;
  }

  .date-picker-calendar {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    background: #ffffff;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    padding: 20px;
    margin-top: 5px;
    min-width: 320px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }

  .date-picker-calendar.active {
    display: block;
  }

  .date-picker-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
    background: #4A9FD8;
    padding: 15px;
    margin: -20px -20px 20px -20px;
  }

  .date-picker-month-year {
    color: #ffffff;
    font-weight: 600;
    font-size: 1.1rem;
  }

  .date-picker-nav {
    background: none;
    border: none;
    color: #ffffff;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 5px 10px;
    transition: opacity 0.3s ease;
  }

  .date-picker-nav:hover {
    opacity: 0.8;
  }

  .date-picker-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
    margin-bottom: 10px;
  }

  .date-picker-weekdays > div {
    text-align: center;
    font-weight: 600;
    color: #4A9FD8;
    font-size: 0.875rem;
    padding: 5px;
  }

  .date-picker-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
  }

  .date-picker-day {
    text-align: center;
    padding: 10px;
    cursor: pointer;
    color: #111827;
    transition: all 0.2s ease;
    border: 1px solid transparent;
  }

  .date-picker-day:hover:not(.disabled):not(.other-month) {
    background: #E7E9EB;
  }

  .date-picker-day.selected {
    background: #4A9FD8;
    color: #ffffff;
  }

  .date-picker-day.in-range {
    background: rgba(74, 159, 216, 0.2);
  }

  .date-picker-day.today {
    border: 2px solid #00857D;
  }

  .date-picker-day.disabled {
    color: #d1d5db;
    cursor: not-allowed;
  }

  .date-picker-day.other-month {
    color: #d1d5db;
    cursor: default;
  }

  /* Calendar icon button */
  .date-picker-icon {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    cursor: pointer;
    pointer-events: auto;
    z-index: 10;
    background: none;
    border: none;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .date-picker-icon svg {
    width: 20px;
    height: 20px;
    stroke: #4A9FD8;
    transition: stroke 0.2s ease;
  }

  .date-picker-icon:hover svg {
    stroke: #3a8fc8;
  }

  .date-picker-field input {
    cursor: text;
    padding-right: 45px;
  }

  .trip-inquiry {
    position: relative;
    margin-top: -150px;
    padding: 0 0 150px 0;
    background-color: transparent;
    z-index: 10;
    /* Prevent this from affecting elements above it */
    overflow: visible;
  }

  /* Mobile specific: reduce or remove negative margin on mobile to prevent header issues */
  @media (max-width: 768px) {
    .trip-inquiry {
      margin-top: -50px; /* Much smaller negative margin on mobile */
    }
  }

  .trip-inquiry::after {
    content: '';
    position: absolute;
    top: 150px;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #E7E9EB;
    z-index: -1;
  }

  /* Adjust the pseudo element on mobile too */
  @media (max-width: 768px) {
    .trip-inquiry::after {
      top: 50px; /* Match the reduced negative margin */
    }
  }

  /* Scope container styles to only affect trip-inquiry section */
  .trip-inquiry .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    position: relative;
  }

  /* Fixed Scroll Button */
  .scroll-btn {
    position: fixed;
    bottom: 40px;
    left: 50%;
    transform: translateX(-50%);
    width: 56px;
    height: 56px;
    background-color: #4A9FD8;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(74, 159, 216, 0.4);
    transition: opacity 0.6s ease, visibility 0.6s ease, transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease;
    opacity: 0;
    visibility: hidden;
  }

  .scroll-btn.visible {
    opacity: 1;
    visibility: visible;
  }

  .scroll-btn:hover {
    background-color: #3a8fc8;
    transform: translateX(-50%) scale(1.1);
    box-shadow: 0 6px 24px rgba(74, 159, 216, 0.5);
  }

  .scroll-btn svg {
    color: #ffffff;
    animation: bounce-chevron 2s infinite ease-in-out;
  }

  @keyframes bounce-chevron {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(4px);
    }
  }

  .trip-inquiry__wrapper {
    display: block;
    background-color: #ffffff;
    padding: 50px;
    border-radius: 0;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    margin-bottom: -100px;
    position: relative; /* Ensure proper stacking context */
  }

  /* On mobile, reduce the negative margin to prevent layout issues */
  @media (max-width: 768px) {
    .trip-inquiry__wrapper {
      margin-bottom: -50px;
      padding: 30px 20px; /* Also reduce padding on mobile */
    }
  }

  .trip-inquiry__title {
    font-size: 2rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }

  .trip-inquiry__description {
    font-size: 0.95rem;
    line-height: 1.6;
    color: #6b7280;
    margin-bottom: 2.5rem;
    font-weight: 400;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }


  .contact-form {
    background: transparent;
    padding: 0;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
  }

  .form-field {
    margin-bottom: 0;
  }

  .form-row--submit {
    grid-template-columns: 1fr;
    margin-top: 10px;
  }

  .form-input::placeholder {
    color: #9ca3af;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 12px 15px;
    border: none;
    border-radius: 0;
    background-color: #f5f5f5;
    font-size: 1rem;
    transition: all 0.3s ease;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    color: #111827;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    background-color: #ebebeb;
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
  }

  .form-submit {
    background-color: #4A9FD8;
    color: #ffffff;
    padding: 15px 40px;
    border: none;
    border-radius: 0;
    font-weight: 500;
    cursor: pointer;
    width: 100%;
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }

  .form-submit:hover:not(:disabled) {
    background-color: #3a8fc8;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(74, 159, 216, 0.3);
  }

  .form-submit:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .btn-spinner svg {
    animation: spin 1s linear infinite;
    display: inline-block;
    vertical-align: middle;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .form-message {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }

  .form-message--success {
    background-color: #d1f5f0;
    color: #00857D;
    border: 1px solid #00857D;
    font-weight: 600;
  }

  .form-message--error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #fecaca;
  }

  .form-field {
    position: relative;
  }

  @media screen and (max-width: 768px) {
    .scroll-btn {
      width: 48px;
      height: 48px;
      bottom: 30px;
    }

    .scroll-btn svg {
      width: 20px;
      height: 20px;
    }

    .trip-inquiry {
      margin-top: -100px;
      padding: 0 20px 80px 20px;
    }

    .trip-inquiry::after {
      top: 100px;
    }

    .trip-inquiry__wrapper {
      padding: 30px;
    }

    .trip-inquiry__title {
      font-size: 1.5rem;
    }

    .trip-inquiry__description {
      font-size: 0.875rem;
    }

    .form-row {
      grid-template-columns: 1fr;
      gap: 15px;
      margin-bottom: 15px;
    }

    .form-submit {
      width: 100%;
    }
  }
</style>

{% javascript %}
  console.log('========================================');
  console.log('TRIP INQUIRY DATE PICKER SCRIPT LOADED');
  console.log('========================================');
  console.log('Time:', new Date().toISOString());
  console.log('Document ready state:', document.readyState);

  // Custom Date Range Picker
  (function() {
    'use strict';

    console.log('IIFE executed, readyState:', document.readyState);

    if (document.readyState === 'loading') {
      console.log('Waiting for DOMContentLoaded...');
      document.addEventListener('DOMContentLoaded', initializeDatePicker);
    } else {
      console.log('DOM already loaded, initializing immediately...');
      initializeDatePicker();
    }

    function initializeDatePicker() {
      console.log('========================================');
      console.log('initializeDatePicker() CALLED');
      console.log('========================================');

      const dateInput = document.getElementById('ContactForm-dates');
      const calendar = document.getElementById('date-picker-calendar');
      const calendarIcon = document.getElementById('calendar-icon');
      const monthYearDisplay = document.getElementById('month-year');
      const calendarDays = document.getElementById('calendar-days');
      const prevMonthBtn = document.getElementById('prev-month');
      const nextMonthBtn = document.getElementById('next-month');

      console.log('Elements found:', {
        dateInput: !!dateInput,
        calendar: !!calendar,
        calendarIcon: !!calendarIcon,
        monthYearDisplay: !!monthYearDisplay,
        calendarDays: !!calendarDays,
        prevMonthBtn: !!prevMonthBtn,
        nextMonthBtn: !!nextMonthBtn
      });

      if (!dateInput || !calendar) {
        console.error('CRITICAL: Missing required elements!');
        console.error('dateInput:', dateInput);
        console.error('calendar:', calendar);
        return;
      }

      console.log('All elements found, proceeding with date picker initialization...');

      let currentDate = new Date();
      let selectedStartDate = null;
      let selectedEndDate = null;
      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                          'July', 'August', 'September', 'October', 'November', 'December'];

      // Function to toggle calendar
      function toggleCalendar(e) {
        e.stopPropagation();
        if (!calendar.classList.contains('active')) {
          calendar.classList.add('active');
          renderCalendar();
        }
      }

      // Toggle calendar visibility on input click
      dateInput.addEventListener('click', toggleCalendar);

      // Toggle calendar visibility on icon click
      if (calendarIcon) {
        calendarIcon.addEventListener('click', toggleCalendar);
      }

      // Prevent calendar clicks from closing it
      calendar.addEventListener('click', function(e) {
        e.stopPropagation();
      });

      // Close calendar when clicking outside
      document.addEventListener('click', function(e) {
        if (!calendar.contains(e.target) && e.target !== dateInput) {
          calendar.classList.remove('active');
        }
      });

      // Navigation
      prevMonthBtn.addEventListener('click', function() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
      });

      nextMonthBtn.addEventListener('click', function() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
      });

      function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const prevLastDay = new Date(year, month, 0);
        const firstDayIndex = firstDay.getDay();
        const lastDayDate = lastDay.getDate();
        const prevLastDayDate = prevLastDay.getDate();

        monthYearDisplay.textContent = `${monthNames[month]} ${year}`;

        let days = '';

        // Previous month days
        for (let x = firstDayIndex; x > 0; x--) {
          days += `<div class="date-picker-day other-month">${prevLastDayDate - x + 1}</div>`;
        }

        // Current month days
        const today = new Date();
        for (let i = 1; i <= lastDayDate; i++) {
          const date = new Date(year, month, i);
          const isPast = date < new Date(today.getFullYear(), today.getMonth(), today.getDate());
          const isToday = date.toDateString() === today.toDateString();
          const isSelected = (selectedStartDate && date.toDateString() === selectedStartDate.toDateString()) ||
                            (selectedEndDate && date.toDateString() === selectedEndDate.toDateString());
          const isInRange = selectedStartDate && selectedEndDate &&
                           date > selectedStartDate && date < selectedEndDate;

          let classes = 'date-picker-day';
          if (isPast) classes += ' disabled';
          if (isToday) classes += ' today';
          if (isSelected) classes += ' selected';
          if (isInRange) classes += ' in-range';

          days += `<div class="${classes}" data-date="${date.toISOString()}">${i}</div>`;
        }

        calendarDays.innerHTML = days;

        // Add click listeners to day elements
        document.querySelectorAll('.date-picker-day:not(.disabled):not(.other-month)').forEach(day => {
          day.addEventListener('click', function() {
            selectDate(new Date(this.dataset.date));
          });
        });
      }

      function selectDate(date) {
        if (!selectedStartDate || (selectedStartDate && selectedEndDate)) {
          // Start new selection
          selectedStartDate = date;
          selectedEndDate = null;
        } else if (date < selectedStartDate) {
          // Selected date is before start, make it the new start
          selectedEndDate = selectedStartDate;
          selectedStartDate = date;
        } else {
          // Selected date is after start, make it the end
          selectedEndDate = date;
        }

        updateInput();
        renderCalendar();

        // Close calendar if both dates are selected
        if (selectedStartDate && selectedEndDate) {
          setTimeout(() => {
            calendar.classList.remove('active');
          }, 300);
        }
      }

      function updateInput() {
        if (selectedStartDate && selectedEndDate) {
          const start = formatDate(selectedStartDate);
          const end = formatDate(selectedEndDate);
          dateInput.value = `${start} to ${end}`;
        } else if (selectedStartDate) {
          dateInput.value = formatDate(selectedStartDate);
        }
      }

      function formatDate(date) {
        const month = monthNames[date.getMonth()];
        const day = date.getDate();
        const year = date.getFullYear();
        return `${month} ${day}, ${year}`;
      }

      // Setup scroll button
      setupScrollButton();
    }
  })();

  function setupScrollButton() {
    console.log('DEBUG: Setting up scroll button...');

    // Scroll button functionality
    const scrollBtn = document.getElementById('scroll-cue-btn');
    const inquirySection = document.querySelector('.trip-inquiry');

    console.log('DEBUG: Scroll button elements:', {
      scrollBtn: !!scrollBtn,
      inquirySection: !!inquirySection
    });

    if (scrollBtn && inquirySection) {
      // Show/hide button based on scroll position
      function updateScrollButton() {
        const inquiryRect = inquirySection.getBoundingClientRect();
        const inquiryBottom = inquiryRect.bottom;
        const windowHeight = window.innerHeight;

        // Show button when inquiry section is visible
        // Hide when scrolled 30% past the inquiry section (into the next section)
        const fadeThreshold = windowHeight * 0.7; // Button disappears when section bottom is 70% up the screen

        if (inquiryRect.top < windowHeight && inquiryBottom > fadeThreshold) {
          scrollBtn.classList.add('visible');
        } else {
          scrollBtn.classList.remove('visible');
        }
      }

      // Check on scroll
      window.addEventListener('scroll', updateScrollButton);

      // Check on load
      updateScrollButton();

      // Click handler
      scrollBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const sectionBottom = inquirySection.getBoundingClientRect().bottom + window.pageYOffset;
        window.scrollTo({
          top: sectionBottom,
          behavior: 'smooth'
        });
      });

      console.log('DEBUG: Scroll button initialized');
    }
  }

  console.log('=== TRIP INQUIRY SCRIPT END ===');
{% endjavascript %}

{% schema %}
{
  "name": "Trip Inquiry Form",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Request a Reservation"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Thanks for your interest in this trip. Let us know your questions below and our team will contact you shortly.</p>"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Submit Button Text",
      "default": "Check Availability"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success Message",
      "default": "Thank you for your inquiry! We'll be in touch soon."
    }
  ],
  "presets": [
    {
      "name": "Trip Inquiry Form"
    }
  ]
}
{% endschema %}