{% comment %}
  Map / Location Section
  Interactive map using Leaflet.js with coordinates from product.metafields.trip.lodge_coordinates
  Expected format: "latitude,longitude" (e.g., "59.0000,-156.0000")
{% endcomment %}

{% if product.metafields.trip.lodge_coordinates != blank %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<section id="trip-map-{{ section.id }}" class="trip-map">
  <div id="map" style="position: absolute; top: -70px;"></div>
    {% assign coords = product.metafields.trip.lodge_coordinates | split: ',' %}
    {% assign latitude = coords[0] | strip %}
    {% assign longitude = coords[1] | strip %}

    <div class="trip-map__container">
      <div id="map-{{ section.id }}" class="trip-map__interactive"
           data-lat="{{ latitude }}"
           data-lng="{{ longitude }}">
      </div>
      <div class="trip-map__overlay" id="map-scroll-overlay-{{ section.id }}">
        <span id="map-scroll-message-{{ section.id }}">Use ⌘ + scroll to zoom the map</span>
      </div>
    </div>

    <script>
      (function() {
        const mapElement = document.getElementById('map-{{ section.id }}');
        const overlay = document.getElementById('map-scroll-overlay-{{ section.id }}');
        const scrollMessage = document.getElementById('map-scroll-message-{{ section.id }}');
        const lat = parseFloat(mapElement.dataset.lat);
        const lng = parseFloat(mapElement.dataset.lng);

        // Detect OS for correct key display
        const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
        const keySymbol = isMac ? '⌘' : 'Ctrl';
        scrollMessage.textContent = `Use ${keySymbol} + scroll to zoom the map`;

        // Initialize map with scroll wheel zoom disabled
        const map = L.map('map-{{ section.id }}', {
          scrollWheelZoom: false,
          dragging: true
        }).setView([lat, lng], 10);

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 18
        }).addTo(map);

        // Add marker without popup
        const marker = L.marker([lat, lng]).addTo(map);

        // Fix tile loading issue
        setTimeout(function() {
          map.invalidateSize();
        }, 100);

        // Handle Command/Control key for scroll zoom
        let commandPressed = false;

        document.addEventListener('keydown', function(e) {
          if (e.key === 'Meta' || e.key === 'Control') {
            commandPressed = true;
            map.scrollWheelZoom.enable();
          }
        });

        document.addEventListener('keyup', function(e) {
          if (e.key === 'Meta' || e.key === 'Control') {
            commandPressed = false;
            map.scrollWheelZoom.disable();
          }
        });

        // Show overlay when mouse is over map and key not pressed
        let overlayTimeout;

        mapElement.addEventListener('mouseenter', function() {
          if (!commandPressed) {
            overlayTimeout = setTimeout(function() {
              overlay.classList.add('visible');
            }, 200);
          }
        });

        mapElement.addEventListener('mouseleave', function() {
          clearTimeout(overlayTimeout);
          overlay.classList.remove('visible');
        });

        mapElement.addEventListener('wheel', function(e) {
          if (!commandPressed) {
            // Allow page scroll to continue, don't let map capture the event
            overlay.classList.add('visible');
            clearTimeout(overlayTimeout);
            overlayTimeout = setTimeout(function() {
              overlay.classList.remove('visible');
            }, 2000);
          }
        }, { passive: true });

        // Hide overlay when key is pressed
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Meta' || e.key === 'Control') {
            overlay.classList.remove('visible');
          }
        });
      })();
    </script>
</section>

<style>
  .trip-map {
    padding: 0;
    margin: 0;
    background-color: #ffffff;
    display: block;
  }

  .trip-map__container {
    position: relative;
    width: 100%;
    height: 600px;
  }

  .trip-map__interactive {
    width: 100%;
    height: 100%;
    display: block;
    margin: 0;
  }

  .trip-map__overlay {
    position: absolute;
    top: 60%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 255, 255, 0.95);
    padding: 16px 24px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 600;
    color: #666666;
    pointer-events: none;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }

  .trip-map__overlay.visible {
    opacity: 1;
  }

  @media screen and (max-width: 768px) {
    .trip-map__container {
      height: 400px;
    }
  }
</style>
{% endif %}

{% schema %}
{
  "name": "Map Location",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Location"
    }
  ],
  "presets": [
    {
      "name": "Map Location"
    }
  ]
}
{% endschema %}