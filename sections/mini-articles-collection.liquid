{%- assign blog = section.settings.blog -%}
{{ 'mini-articles-collection.css' | asset_url | stylesheet_tag }}

<section class="section mini-articles-collection" data-section-id="{{ section.id }}" data-section-type="mini-articles-collection">
  <div class="container">
    {%- if section.settings.title != blank -%}
      <header class="section__header">
        <h2 class="mini-articles-collection__title section__title heading h2">{{ section.settings.title | escape }}</h2>

        {%- unless section.settings.link_title == blank -%}
          <a href="{{ blog.url }}" class="section__action-link link">{{ section.settings.link_title }} {% render 'icon', icon: 'tail-right' %}</a>
        {%- endunless -%}
      </header>
    {%- endif -%}

    {%- capture block_list -%}
      <div class="block-list block-list--loose" 
           data-mini-articles-tag="{{ section.settings.tag }}"
           data-mini-articles-count="{{ section.settings.blog_posts_count }}"
           data-mini-articles-show-category="{{ section.settings.show_category }}"
           data-mini-articles-show-author="{{ section.settings.show_author }}"
           data-mini-articles-show-date="{{ section.settings.show_date }}"
           data-mini-articles-show-excerpt="{{ section.settings.show_excerpt }}"
           data-mini-articles-background-color="{{ section.settings.background_color | default: '#ffffff' }}">
        <!-- Skeleton loading cards -->
        {%- for i in (1..section.settings.blog_posts_count) -%}
          <div class="block-list__item 1/2--tablet 1/3--lap-and-up">
            <div class="article-list__item">
              <div class="skeleton-card">
                <div class="skeleton-card__image"></div>
                <div class="skeleton-card__content">
                  <div class="skeleton-card__title"></div>
                  <div class="skeleton-card__meta"></div>
                  <div class="skeleton-card__excerpt"></div>
                  <div class="skeleton-card__excerpt"></div>
                </div>
              </div>
            </div>
          </div>
        {%- endfor -%}
      </div>
    {%- endcapture -%}

    {%- if section.settings.stack_mobile -%}
      {{ block_list }}
    {%- else -%}
      <div class="scroller">
        <div class="scroller__inner">
          {{ block_list }}
        </div>
      </div>
    {%- endif -%}
  </div>
</section>

<script>
// Simplified Storefront API GraphQL query using direct articles query
const MINI_ARTICLES_QUERY = `
  query getArticles($first: Int!, $query: String) {
    articles(first: $first, query: $query, sortKey: PUBLISHED_AT, reverse: true) {
      nodes {
        id
        title
        handle
        excerpt(truncateAt: 150)
        content(truncateAt: 300)
        publishedAt
        tags
        image {
          url
          altText
          width
          height
        }
        authorV2 {
          name
          firstName
          lastName
        }
        onlineStoreUrl
        blog {
          handle
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
`;

// Function to make tokenless Storefront API call using direct articles query
async function fetchMiniArticles(blogHandle = 'Trident Fly Fishing', tag = null, maxArticles = 500) {
  try {
    // Build query filter for specific blog and optionally tag
    let queryFilter = `blog_title:"${blogHandle}"`;
    if (tag && tag.trim() !== '') {
      queryFilter += ` AND tag:"${tag}"`;
    }
    const apiUrl = `https://{{ shop.permanent_domain }}/api/2025-10/graphql.json`;
    
    // console.log('üîç Mini Articles API Request Details:');
    // console.log('- URL:', apiUrl);
    // console.log('- Blog Handle:', blogHandle);
    // console.log('- Tag Filter:', tag || 'none (all articles)');
    // console.log('- Query Filter:', queryFilter);
    // console.log('- Max Articles:', maxArticles);
    
    const requestBody = {
      query: MINI_ARTICLES_QUERY,
      variables: {
        first: maxArticles,
        query: queryFilter
      }
    };
    
    // console.log('üì§ Request Body:', JSON.stringify(requestBody, null, 2));
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    // console.log('üì• Response Status:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      // console.error('‚ùå HTTP Error Response Body:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
    }

    const data = await response.json();
    // console.log('üìä Full API Response:', JSON.stringify(data, null, 2));
    
    if (data.errors) {
      // console.error('‚ùå GraphQL errors:', data.errors);
      data.errors.forEach((error, index) => {
        // console.error(`Error ${index + 1}:`, error.message);
        // if (error.locations) console.error('Locations:', error.locations);
        // if (error.path) console.error('Path:', error.path);
        // if (error.extensions) console.error('Extensions:', error.extensions);
      });
      return null;
    }

    const articles = data.data?.articles?.nodes || [];
    // console.log(`‚úÖ Successfully fetched ${articles.length} articles for mini articles collection`);
    
    if (articles.length > 0) {
      // console.log('üìù Sample article:', {
      //   title: articles[0].title,
      //   handle: articles[0].handle,
      //   blog: articles[0].blog?.handle,
      //   tags: articles[0].tags,
      //   publishedAt: articles[0].publishedAt
      // });
    } else {
      // console.warn('‚ö†Ô∏è No articles found for mini articles collection. Possible reasons:');
      // console.warn('- Blog handle "' + blogHandle + '" might not exist');
      // console.warn('- Blog might have no published articles');
      // console.warn('- Blog might not be accessible via Storefront API');
      // console.warn('- Query filter might be incorrect');
    }

    return articles;
  } catch (error) {
    // console.error('üí• Error fetching articles for mini articles collection:', error);
    // console.error('Error details:', {
    //   name: error.name,
    //   message: error.message,
    //   stack: error.stack
    // });
    return null;
  }
}

// Function to mimic Shopify's handleize filter
function handleize(str) {
  if (!str || typeof str !== 'string') {
    return '';
  }
  
  return str
    .toLowerCase()                    // Convert to lowercase
    .replace(/[^a-z0-9\s-]/g, '')     // Remove special characters except spaces and hyphens
    .replace(/\s+/g, '-')             // Replace spaces with hyphens
    .replace(/-+/g, '-')             // Replace multiple consecutive hyphens with single hyphen
    .replace(/^-+|-+$/g, '');        // Remove leading and trailing hyphens
}

// Function to create article HTML matching the existing article-item structure
function createMiniArticlesHTML(article, sectionSettings, backgroundColor = '#ffffff') {
  const publishedDate = new Date(article.publishedAt).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
  const author = article.authorV2?.name || 'Anonymous';
  const authorHandle = handleize(author);
  const excerpt = article.excerpt || article.content || '';
  const imageUrl = article.image?.url || '';
  const imageAlt = article.image?.altText || article.title;
  const category = article.tags.length > 0 ? article.tags[0] : '';

  // Build meta items based on section settings
  let metaItems = [];
  if (sectionSettings.show_category && category) {
    metaItems.push(`<span class="article-item__meta-item">${category}</span>`);
  }
  if (sectionSettings.show_author) {
    metaItems.push(`<a href="/pages/authors/${authorHandle}" class="article-item__meta-item">By ${author}</a>`);
  }
  if (sectionSettings.show_date) {
    metaItems.push(`<time class="article-item__meta-item">${publishedDate}</time>`);
  }

  // Return the block-list__item structure for grid layout
  return `
    <div class="block-list__item 1/2--tablet 1/3--lap-and-up">
      <div class="article-list__item">
        <div class="article-item" style="background-color: ${backgroundColor};">
          ${imageUrl ? `
            <a href="${article.onlineStoreUrl}" class="article-item__image-container">
              <img src="${imageUrl}" alt="${imageAlt}" loading="lazy" class="article-item__image">
            </a>
          ` : ''}
          <h3 class="article-item__title heading h4">
            <a href="${article.onlineStoreUrl}" class="link">${article.title}</a>
          </h3>
          ${metaItems.length > 0 ? `
            <div class="article-item__meta">
              ${metaItems.join('')}
            </div>
          ` : ''}
          ${sectionSettings.show_excerpt && excerpt ? `
            <div class="article-item__excerpt rte">
              ${excerpt.length > 80 ? excerpt.substring(0, 80) + '...' : excerpt}
            </div>
          ` : ''}
        </div>
      </div>
    </div>
  `;
}

// Function to update mini articles collection with API data
async function updateMiniArticlesWithAPI() {
  // console.log('üöÄ Starting updateMiniArticlesWithAPI...');
  
  // Check if we should use API data
  const urlParams = new URLSearchParams(window.location.search);
  const forceAPI = urlParams.get('use_api') === 'true';
  
  // console.log('üîç Environment Check:');
  // console.log('- Current URL:', window.location.href);
  // console.log('- URL Params:', Object.fromEntries(urlParams.entries()));
  // console.log('- Force API:', forceAPI);
  
  // Run API call on any page that has mini-articles-collection sections
  // console.log('üìã Running API call on current page');

  // Process ALL mini-articles-collection sections on the page
  const miniArticlesSections = document.querySelectorAll('[data-section-type="mini-articles-collection"]');
  // console.log('üéØ Mini articles collection sections found:', miniArticlesSections.length);
  
  if (miniArticlesSections.length === 0) {
    // console.log('‚ùå No mini-articles-collection sections found, skipping API call');
    return;
  }

  // console.log('üåê Fetching articles from Trident Fly Fishing blog via Storefront API...');

  // Process each mini-articles-collection section individually
  for (let sectionIndex = 0; sectionIndex < miniArticlesSections.length; sectionIndex++) {
    const miniArticlesSection = miniArticlesSections[sectionIndex];
    const sectionId = miniArticlesSection.getAttribute('data-section-id');
    
    // console.log(`\nüìë Processing mini articles collection section ${sectionIndex + 1} (ID: ${sectionId})`);

    // Get section-specific settings from data attributes
    const blockListElement = miniArticlesSection.querySelector('.block-list');
    const sectionSettings = {
      show_category: blockListElement.getAttribute('data-mini-articles-show-category') === 'true',
      show_author: blockListElement.getAttribute('data-mini-articles-show-author') === 'true',
      show_date: blockListElement.getAttribute('data-mini-articles-show-date') === 'true',
      show_excerpt: blockListElement.getAttribute('data-mini-articles-show-excerpt') === 'true'
    };

    // Extract tag and other settings from the section's data attributes
    const tag = blockListElement.getAttribute('data-mini-articles-tag') || '';
    const articlesCount = parseInt(blockListElement.getAttribute('data-mini-articles-count')) || 3;
    const backgroundColor = blockListElement.getAttribute('data-mini-articles-background-color') || '#ffffff';
    
    // console.log(`- Tag: "${tag || 'none'}"`);
    // console.log(`- Articles count: ${articlesCount}`);
    
    // Make API call for this specific section with its tag filter
    const articles = await fetchMiniArticles('Trident Fly Fishing', tag, articlesCount);
    
    if (articles && articles.length > 0) {
      // console.log(`‚úÖ Mini Articles Collection ${sectionIndex + 1}: Found ${articles.length} articles`);
      
      // Create article HTML
      const articlesHTML = articles.map(article => createMiniArticlesHTML(article, sectionSettings, backgroundColor)).join('');
      
      // Update the collection content
      if (blockListElement) {
        // console.log(`üé® Updating article list for mini articles collection ${sectionIndex + 1}`);
        // console.log('- Block list classes before:', blockListElement.className);
        // console.log('- Articles HTML length:', articlesHTML.length);
        
        // Add a small delay to show skeleton loading
        setTimeout(() => {
          blockListElement.innerHTML = articlesHTML;
          
          // console.log('- Block list classes after:', blockListElement.className);
          // console.log('- Number of article items:', blockListElement.querySelectorAll('.block-list__item').length);
        }, 200); // 200ms delay to show skeleton loading
      }
    } else {
      // console.log(`‚ö†Ô∏è Mini Articles Collection ${sectionIndex + 1}: No articles found`);
      
      // Show empty state if no articles found
      if (blockListElement) {
        setTimeout(() => {
          blockListElement.innerHTML = `
            <div class="block-list__item" style="grid-column: 1 / -1; text-align: center; padding: 2rem;">
              <p style="color: #666; font-size: 1rem;">No articles found for this tag.</p>
            </div>
          `;
        }, 200);
      }
    }
  }

  // console.log('\nüéâ Finished processing all mini articles collection sections');
}

// Initialize when DOM is loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    updateMiniArticlesWithAPI();
  });
} else {
  updateMiniArticlesWithAPI();
}
</script>

{% schema %}
{
  "name": "Mini articles collection",
  "settings": [
    {
      "type": "blog",
      "id": "blog",
      "label": "Blog"
    },
    {
      "type": "range",
      "id": "blog_posts_count",
      "label": "Blog posts to show",
      "min": 3,
      "max": 9,
      "step": 3,
      "default": 3
	  },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Mini articles collection"
    },
    {
      "type": "text",
      "id": "link_title",
      "label": "Link title",
      "default": "View all"
    },
    {
      "type": "text",
      "id": "tag",
      "label": "Tag",
      "info": "Enter the exact tag name to filter articles by. Leave empty to show all articles. Case sensitive.",
      "placeholder": "e.g. Fly Fishing Travel"
    },
    {
      "type": "checkbox",
      "id": "show_category",
      "label": "Show category",
      "info": "The first article's tag will be shown as category.",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_author",
      "label": "Show author",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_date",
      "label": "Show date",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_excerpt",
      "label": "Show excerpt",
      "default": false
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Articles Background Color",
      "default": "#ffffff",
      "info": "Background color for article cards"
    },
    {
      "type": "checkbox",
      "id": "stack_mobile",
      "label": "Stack on mobile",
      "default": false
    }
  ],
  "presets": [
    {
      "category": "Blog",
      "name": "Mini articles collection",
      "settings": {
        "blog": "news"
      }
    }
  ]
}
{% endschema %}
